#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceDirectoryTemplate.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ServiceDirectory")]
	public partial class ServiceDirectoryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDirectorate(Directorate instance);
    partial void UpdateDirectorate(Directorate instance);
    partial void DeleteDirectorate(Directorate instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertSupportingMaterial(SupportingMaterial instance);
    partial void UpdateSupportingMaterial(SupportingMaterial instance);
    partial void DeleteSupportingMaterial(SupportingMaterial instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertTrustDistrict(TrustDistrict instance);
    partial void UpdateTrustDistrict(TrustDistrict instance);
    partial void DeleteTrustDistrict(TrustDistrict instance);
    partial void InsertTrustRegion(TrustRegion instance);
    partial void UpdateTrustRegion(TrustRegion instance);
    partial void DeleteTrustRegion(TrustRegion instance);
    partial void InsertReferenceData(ReferenceData instance);
    partial void UpdateReferenceData(ReferenceData instance);
    partial void DeleteReferenceData(ReferenceData instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertFundingDetail(FundingDetail instance);
    partial void UpdateFundingDetail(FundingDetail instance);
    partial void DeleteFundingDetail(FundingDetail instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertGovOfficeRegion(GovOfficeRegion instance);
    partial void UpdateGovOfficeRegion(GovOfficeRegion instance);
    partial void DeleteGovOfficeRegion(GovOfficeRegion instance);
    partial void InsertPremiseDetail(PremiseDetail instance);
    partial void UpdatePremiseDetail(PremiseDetail instance);
    partial void DeletePremiseDetail(PremiseDetail instance);
    partial void InsertPermiseDetailForCost(PermiseDetailForCost instance);
    partial void UpdatePermiseDetailForCost(PermiseDetailForCost instance);
    partial void DeletePermiseDetailForCost(PermiseDetailForCost instance);
    partial void InsertGovCounty(GovCounty instance);
    partial void UpdateGovCounty(GovCounty instance);
    partial void DeleteGovCounty(GovCounty instance);
    partial void InsertFacility(Facility instance);
    partial void UpdateFacility(Facility instance);
    partial void DeleteFacility(Facility instance);
    partial void InsertVolunteering(Volunteering instance);
    partial void UpdateVolunteering(Volunteering instance);
    partial void DeleteVolunteering(Volunteering instance);
    partial void InsertProjectMinorWork(ProjectMinorWork instance);
    partial void UpdateProjectMinorWork(ProjectMinorWork instance);
    partial void DeleteProjectMinorWork(ProjectMinorWork instance);
    partial void InsertOrganisationLinkService(OrganisationLinkService instance);
    partial void UpdateOrganisationLinkService(OrganisationLinkService instance);
    partial void DeleteOrganisationLinkService(OrganisationLinkService instance);
    partial void InsertPremiseLinkService(PremiseLinkService instance);
    partial void UpdatePremiseLinkService(PremiseLinkService instance);
    partial void DeletePremiseLinkService(PremiseLinkService instance);
    partial void InsertSICCode(SICCode instance);
    partial void UpdateSICCode(SICCode instance);
    partial void DeleteSICCode(SICCode instance);
    partial void InsertPremiseOpenSchedule(PremiseOpenSchedule instance);
    partial void UpdatePremiseOpenSchedule(PremiseOpenSchedule instance);
    partial void DeletePremiseOpenSchedule(PremiseOpenSchedule instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertOrganisation(Organisation instance);
    partial void UpdateOrganisation(Organisation instance);
    partial void DeleteOrganisation(Organisation instance);
    partial void InsertProgramme(Programme instance);
    partial void UpdateProgramme(Programme instance);
    partial void DeleteProgramme(Programme instance);
    partial void InsertPremise(Premise instance);
    partial void UpdatePremise(Premise instance);
    partial void DeletePremise(Premise instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertCounty(County instance);
    partial void UpdateCounty(County instance);
    partial void DeleteCounty(County instance);
    partial void InsertTown(Town instance);
    partial void UpdateTown(Town instance);
    partial void DeleteTown(Town instance);
    #endregion
		
		public ServiceDirectoryDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ServiceDirectoryConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceDirectoryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceDirectoryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceDirectoryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceDirectoryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Directorate> Directorates
		{
			get
			{
				return this.GetTable<Directorate>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<SupportingMaterial> SupportingMaterials
		{
			get
			{
				return this.GetTable<SupportingMaterial>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<TrustDistrict> TrustDistricts
		{
			get
			{
				return this.GetTable<TrustDistrict>();
			}
		}
		
		public System.Data.Linq.Table<TrustRegion> TrustRegions
		{
			get
			{
				return this.GetTable<TrustRegion>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceData> ReferenceDatas
		{
			get
			{
				return this.GetTable<ReferenceData>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<FundingDetail> FundingDetails
		{
			get
			{
				return this.GetTable<FundingDetail>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<GovOfficeRegion> GovOfficeRegions
		{
			get
			{
				return this.GetTable<GovOfficeRegion>();
			}
		}
		
		public System.Data.Linq.Table<PremiseDetail> PremiseDetails
		{
			get
			{
				return this.GetTable<PremiseDetail>();
			}
		}
		
		public System.Data.Linq.Table<PermiseDetailForCost> PermiseDetailForCosts
		{
			get
			{
				return this.GetTable<PermiseDetailForCost>();
			}
		}
		
		public System.Data.Linq.Table<GovCounty> GovCounties
		{
			get
			{
				return this.GetTable<GovCounty>();
			}
		}
		
		public System.Data.Linq.Table<Facility> Facilities
		{
			get
			{
				return this.GetTable<Facility>();
			}
		}
		
		public System.Data.Linq.Table<Volunteering> Volunteerings
		{
			get
			{
				return this.GetTable<Volunteering>();
			}
		}
		
		public System.Data.Linq.Table<ProjectMinorWork> ProjectMinorWorks
		{
			get
			{
				return this.GetTable<ProjectMinorWork>();
			}
		}
		
		public System.Data.Linq.Table<OrganisationLinkService> OrganisationLinkServices
		{
			get
			{
				return this.GetTable<OrganisationLinkService>();
			}
		}
		
		public System.Data.Linq.Table<PremiseLinkService> PremiseLinkServices
		{
			get
			{
				return this.GetTable<PremiseLinkService>();
			}
		}
		
		public System.Data.Linq.Table<SICCode> SICCodes
		{
			get
			{
				return this.GetTable<SICCode>();
			}
		}
		
		public System.Data.Linq.Table<PremiseOpenSchedule> PremiseOpenSchedules
		{
			get
			{
				return this.GetTable<PremiseOpenSchedule>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Organisation> Organisations
		{
			get
			{
				return this.GetTable<Organisation>();
			}
		}
		
		public System.Data.Linq.Table<Programme> Programmes
		{
			get
			{
				return this.GetTable<Programme>();
			}
		}
		
		public System.Data.Linq.Table<Premise> Premises
		{
			get
			{
				return this.GetTable<Premise>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<County> Counties
		{
			get
			{
				return this.GetTable<County>();
			}
		}
		
		public System.Data.Linq.Table<Town> Towns
		{
			get
			{
				return this.GetTable<Town>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Directorate")]
	public partial class Directorate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DirID;
		
		private int _OrgID;
		
		private System.Nullable<int> _LeadContactID;
		
		private int _DirSICCode;
		
		private string _DirName;
		
		private string _DirShortDescription;
		
		private string _DirFullDescription;
		
		private string _DirPostCode;
		
		private string _DirAddr1;
		
		private string _DirAddr2;
		
		private string _DirAddr3;
		
		private string _DirEmail;
		
		private string _DirWebAddr;
		
		private string _DirPhone;
		
		private string _DirFax;
		
		private System.Nullable<decimal> _DirCharNumb;
		
		private System.Nullable<decimal> _DirCompNumb;
		
		private System.Nullable<int> _CountryID;
		
		private string _County;
		
		private string _CityTown;
		
		private int _DirIsActive;
		
		private string _TypeOfBusiness;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<ProjectMinorWork> _ProjectMinorWorks;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDirIDChanging(int value);
    partial void OnDirIDChanged();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnLeadContactIDChanging(System.Nullable<int> value);
    partial void OnLeadContactIDChanged();
    partial void OnDirSICCodeChanging(int value);
    partial void OnDirSICCodeChanged();
    partial void OnDirNameChanging(string value);
    partial void OnDirNameChanged();
    partial void OnDirShortDescriptionChanging(string value);
    partial void OnDirShortDescriptionChanged();
    partial void OnDirFullDescriptionChanging(string value);
    partial void OnDirFullDescriptionChanged();
    partial void OnDirPostCodeChanging(string value);
    partial void OnDirPostCodeChanged();
    partial void OnDirAddr1Changing(string value);
    partial void OnDirAddr1Changed();
    partial void OnDirAddr2Changing(string value);
    partial void OnDirAddr2Changed();
    partial void OnDirAddr3Changing(string value);
    partial void OnDirAddr3Changed();
    partial void OnDirEmailChanging(string value);
    partial void OnDirEmailChanged();
    partial void OnDirWebAddrChanging(string value);
    partial void OnDirWebAddrChanged();
    partial void OnDirPhoneChanging(string value);
    partial void OnDirPhoneChanged();
    partial void OnDirFaxChanging(string value);
    partial void OnDirFaxChanged();
    partial void OnDirCharNumbChanging(System.Nullable<decimal> value);
    partial void OnDirCharNumbChanged();
    partial void OnDirCompNumbChanging(System.Nullable<decimal> value);
    partial void OnDirCompNumbChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnCityTownChanging(string value);
    partial void OnCityTownChanged();
    partial void OnDirIsActiveChanging(int value);
    partial void OnDirIsActiveChanged();
    partial void OnTypeOfBusinessChanging(string value);
    partial void OnTypeOfBusinessChanged();
    #endregion
		
		public Directorate()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._ProjectMinorWorks = new EntitySet<ProjectMinorWork>(new Action<ProjectMinorWork>(this.attach_ProjectMinorWorks), new Action<ProjectMinorWork>(this.detach_ProjectMinorWorks));
			this._Contact = default(EntityRef<Contact>);
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DirID
		{
			get
			{
				return this._DirID;
			}
			set
			{
				if ((this._DirID != value))
				{
					this.OnDirIDChanging(value);
					this.SendPropertyChanging();
					this._DirID = value;
					this.SendPropertyChanged("DirID");
					this.OnDirIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL")]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadContactID", DbType="Int")]
		public System.Nullable<int> LeadContactID
		{
			get
			{
				return this._LeadContactID;
			}
			set
			{
				if ((this._LeadContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadContactIDChanging(value);
					this.SendPropertyChanging();
					this._LeadContactID = value;
					this.SendPropertyChanged("LeadContactID");
					this.OnLeadContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirSICCode", DbType="Int NOT NULL")]
		public int DirSICCode
		{
			get
			{
				return this._DirSICCode;
			}
			set
			{
				if ((this._DirSICCode != value))
				{
					this.OnDirSICCodeChanging(value);
					this.SendPropertyChanging();
					this._DirSICCode = value;
					this.SendPropertyChanged("DirSICCode");
					this.OnDirSICCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DirName
		{
			get
			{
				return this._DirName;
			}
			set
			{
				if ((this._DirName != value))
				{
					this.OnDirNameChanging(value);
					this.SendPropertyChanging();
					this._DirName = value;
					this.SendPropertyChanged("DirName");
					this.OnDirNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirShortDescription", DbType="VarChar(50)")]
		public string DirShortDescription
		{
			get
			{
				return this._DirShortDescription;
			}
			set
			{
				if ((this._DirShortDescription != value))
				{
					this.OnDirShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DirShortDescription = value;
					this.SendPropertyChanged("DirShortDescription");
					this.OnDirShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirFullDescription", DbType="VarChar(50)")]
		public string DirFullDescription
		{
			get
			{
				return this._DirFullDescription;
			}
			set
			{
				if ((this._DirFullDescription != value))
				{
					this.OnDirFullDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DirFullDescription = value;
					this.SendPropertyChanged("DirFullDescription");
					this.OnDirFullDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirPostCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DirPostCode
		{
			get
			{
				return this._DirPostCode;
			}
			set
			{
				if ((this._DirPostCode != value))
				{
					this.OnDirPostCodeChanging(value);
					this.SendPropertyChanging();
					this._DirPostCode = value;
					this.SendPropertyChanged("DirPostCode");
					this.OnDirPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirAddr1", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string DirAddr1
		{
			get
			{
				return this._DirAddr1;
			}
			set
			{
				if ((this._DirAddr1 != value))
				{
					this.OnDirAddr1Changing(value);
					this.SendPropertyChanging();
					this._DirAddr1 = value;
					this.SendPropertyChanged("DirAddr1");
					this.OnDirAddr1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirAddr2", DbType="VarChar(150)")]
		public string DirAddr2
		{
			get
			{
				return this._DirAddr2;
			}
			set
			{
				if ((this._DirAddr2 != value))
				{
					this.OnDirAddr2Changing(value);
					this.SendPropertyChanging();
					this._DirAddr2 = value;
					this.SendPropertyChanged("DirAddr2");
					this.OnDirAddr2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirAddr3", DbType="VarChar(150)")]
		public string DirAddr3
		{
			get
			{
				return this._DirAddr3;
			}
			set
			{
				if ((this._DirAddr3 != value))
				{
					this.OnDirAddr3Changing(value);
					this.SendPropertyChanging();
					this._DirAddr3 = value;
					this.SendPropertyChanged("DirAddr3");
					this.OnDirAddr3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirEmail", DbType="VarChar(50)")]
		public string DirEmail
		{
			get
			{
				return this._DirEmail;
			}
			set
			{
				if ((this._DirEmail != value))
				{
					this.OnDirEmailChanging(value);
					this.SendPropertyChanging();
					this._DirEmail = value;
					this.SendPropertyChanged("DirEmail");
					this.OnDirEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirWebAddr", DbType="VarChar(100)")]
		public string DirWebAddr
		{
			get
			{
				return this._DirWebAddr;
			}
			set
			{
				if ((this._DirWebAddr != value))
				{
					this.OnDirWebAddrChanging(value);
					this.SendPropertyChanging();
					this._DirWebAddr = value;
					this.SendPropertyChanged("DirWebAddr");
					this.OnDirWebAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirPhone", DbType="VarChar(50)")]
		public string DirPhone
		{
			get
			{
				return this._DirPhone;
			}
			set
			{
				if ((this._DirPhone != value))
				{
					this.OnDirPhoneChanging(value);
					this.SendPropertyChanging();
					this._DirPhone = value;
					this.SendPropertyChanged("DirPhone");
					this.OnDirPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirFax", DbType="VarChar(50)")]
		public string DirFax
		{
			get
			{
				return this._DirFax;
			}
			set
			{
				if ((this._DirFax != value))
				{
					this.OnDirFaxChanging(value);
					this.SendPropertyChanging();
					this._DirFax = value;
					this.SendPropertyChanged("DirFax");
					this.OnDirFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirCharNumb", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> DirCharNumb
		{
			get
			{
				return this._DirCharNumb;
			}
			set
			{
				if ((this._DirCharNumb != value))
				{
					this.OnDirCharNumbChanging(value);
					this.SendPropertyChanging();
					this._DirCharNumb = value;
					this.SendPropertyChanged("DirCharNumb");
					this.OnDirCharNumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirCompNumb", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> DirCompNumb
		{
			get
			{
				return this._DirCompNumb;
			}
			set
			{
				if ((this._DirCompNumb != value))
				{
					this.OnDirCompNumbChanging(value);
					this.SendPropertyChanging();
					this._DirCompNumb = value;
					this.SendPropertyChanged("DirCompNumb");
					this.OnDirCompNumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_County", DbType="VarChar(50)")]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityTown", DbType="VarChar(50)")]
		public string CityTown
		{
			get
			{
				return this._CityTown;
			}
			set
			{
				if ((this._CityTown != value))
				{
					this.OnCityTownChanging(value);
					this.SendPropertyChanging();
					this._CityTown = value;
					this.SendPropertyChanged("CityTown");
					this.OnCityTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirIsActive", DbType="Int NOT NULL")]
		public int DirIsActive
		{
			get
			{
				return this._DirIsActive;
			}
			set
			{
				if ((this._DirIsActive != value))
				{
					this.OnDirIsActiveChanging(value);
					this.SendPropertyChanging();
					this._DirIsActive = value;
					this.SendPropertyChanged("DirIsActive");
					this.OnDirIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfBusiness", DbType="VarChar(100)")]
		public string TypeOfBusiness
		{
			get
			{
				return this._TypeOfBusiness;
			}
			set
			{
				if ((this._TypeOfBusiness != value))
				{
					this.OnTypeOfBusinessChanging(value);
					this.SendPropertyChanging();
					this._TypeOfBusiness = value;
					this.SendPropertyChanged("TypeOfBusiness");
					this.OnTypeOfBusinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directorate_Department", Storage="_Departments", ThisKey="DirID", OtherKey="DirID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directorate_ProjectMinorWork", Storage="_ProjectMinorWorks", ThisKey="DirID", OtherKey="Directorate")]
		public EntitySet<ProjectMinorWork> ProjectMinorWorks
		{
			get
			{
				return this._ProjectMinorWorks;
			}
			set
			{
				this._ProjectMinorWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Directorate", Storage="_Contact", ThisKey="LeadContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Directorates.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Directorates.Add(this);
						this._LeadContactID = value.ContactID;
					}
					else
					{
						this._LeadContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Directorate", Storage="_Organisation", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Directorates.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Directorates.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Directorate = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Directorate = null;
		}
		
		private void attach_ProjectMinorWorks(ProjectMinorWork entity)
		{
			this.SendPropertyChanging();
			entity.Directorate1 = this;
		}
		
		private void detach_ProjectMinorWorks(ProjectMinorWork entity)
		{
			this.SendPropertyChanging();
			entity.Directorate1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepID;
		
		private int _DirID;
		
		private string _DepName;
		
		private string _DepShortDescription;
		
		private string _DepFullDescription;
		
		private string _TypeOfBusiness;
		
		private System.Nullable<int> _DepSICCode;
		
		private System.Nullable<int> _LeadContactID;
		
		private string _DepPostCode;
		
		private string _DepAddr1;
		
		private string _DepAddr2;
		
		private string _DepAddr3;
		
		private string _DepPhone;
		
		private string _DepFax;
		
		private string _DepEmail;
		
		private string _DepWebAddr;
		
		private System.Nullable<int> _CountryID;
		
		private string _County;
		
		private string _CityTown;
		
		private int _DepIsActive;
		
		private EntitySet<Team> _Teams;
		
		private EntityRef<Directorate> _Directorate;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepIDChanging(int value);
    partial void OnDepIDChanged();
    partial void OnDirIDChanging(int value);
    partial void OnDirIDChanged();
    partial void OnDepNameChanging(string value);
    partial void OnDepNameChanged();
    partial void OnDepShortDescriptionChanging(string value);
    partial void OnDepShortDescriptionChanged();
    partial void OnDepFullDescriptionChanging(string value);
    partial void OnDepFullDescriptionChanged();
    partial void OnTypeOfBusinessChanging(string value);
    partial void OnTypeOfBusinessChanged();
    partial void OnDepSICCodeChanging(System.Nullable<int> value);
    partial void OnDepSICCodeChanged();
    partial void OnLeadContactIDChanging(System.Nullable<int> value);
    partial void OnLeadContactIDChanged();
    partial void OnDepPostCodeChanging(string value);
    partial void OnDepPostCodeChanged();
    partial void OnDepAddr1Changing(string value);
    partial void OnDepAddr1Changed();
    partial void OnDepAddr2Changing(string value);
    partial void OnDepAddr2Changed();
    partial void OnDepAddr3Changing(string value);
    partial void OnDepAddr3Changed();
    partial void OnDepPhoneChanging(string value);
    partial void OnDepPhoneChanged();
    partial void OnDepFaxChanging(string value);
    partial void OnDepFaxChanged();
    partial void OnDepEmailChanging(string value);
    partial void OnDepEmailChanged();
    partial void OnDepWebAddrChanging(string value);
    partial void OnDepWebAddrChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnCityTownChanging(string value);
    partial void OnCityTownChanged();
    partial void OnDepIsActiveChanging(int value);
    partial void OnDepIsActiveChanged();
    #endregion
		
		public Department()
		{
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Directorate = default(EntityRef<Directorate>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepID
		{
			get
			{
				return this._DepID;
			}
			set
			{
				if ((this._DepID != value))
				{
					this.OnDepIDChanging(value);
					this.SendPropertyChanging();
					this._DepID = value;
					this.SendPropertyChanged("DepID");
					this.OnDepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirID", DbType="Int NOT NULL")]
		public int DirID
		{
			get
			{
				return this._DirID;
			}
			set
			{
				if ((this._DirID != value))
				{
					if (this._Directorate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirIDChanging(value);
					this.SendPropertyChanging();
					this._DirID = value;
					this.SendPropertyChanged("DirID");
					this.OnDirIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string DepName
		{
			get
			{
				return this._DepName;
			}
			set
			{
				if ((this._DepName != value))
				{
					this.OnDepNameChanging(value);
					this.SendPropertyChanging();
					this._DepName = value;
					this.SendPropertyChanged("DepName");
					this.OnDepNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepShortDescription", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string DepShortDescription
		{
			get
			{
				return this._DepShortDescription;
			}
			set
			{
				if ((this._DepShortDescription != value))
				{
					this.OnDepShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DepShortDescription = value;
					this.SendPropertyChanged("DepShortDescription");
					this.OnDepShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepFullDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string DepFullDescription
		{
			get
			{
				return this._DepFullDescription;
			}
			set
			{
				if ((this._DepFullDescription != value))
				{
					this.OnDepFullDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DepFullDescription = value;
					this.SendPropertyChanged("DepFullDescription");
					this.OnDepFullDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfBusiness", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TypeOfBusiness
		{
			get
			{
				return this._TypeOfBusiness;
			}
			set
			{
				if ((this._TypeOfBusiness != value))
				{
					this.OnTypeOfBusinessChanging(value);
					this.SendPropertyChanging();
					this._TypeOfBusiness = value;
					this.SendPropertyChanged("TypeOfBusiness");
					this.OnTypeOfBusinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepSICCode", DbType="Int")]
		public System.Nullable<int> DepSICCode
		{
			get
			{
				return this._DepSICCode;
			}
			set
			{
				if ((this._DepSICCode != value))
				{
					this.OnDepSICCodeChanging(value);
					this.SendPropertyChanging();
					this._DepSICCode = value;
					this.SendPropertyChanged("DepSICCode");
					this.OnDepSICCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadContactID", DbType="Int")]
		public System.Nullable<int> LeadContactID
		{
			get
			{
				return this._LeadContactID;
			}
			set
			{
				if ((this._LeadContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadContactIDChanging(value);
					this.SendPropertyChanging();
					this._LeadContactID = value;
					this.SendPropertyChanged("LeadContactID");
					this.OnLeadContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepPostCode", DbType="VarChar(50)")]
		public string DepPostCode
		{
			get
			{
				return this._DepPostCode;
			}
			set
			{
				if ((this._DepPostCode != value))
				{
					this.OnDepPostCodeChanging(value);
					this.SendPropertyChanging();
					this._DepPostCode = value;
					this.SendPropertyChanged("DepPostCode");
					this.OnDepPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepAddr1", DbType="VarChar(150)")]
		public string DepAddr1
		{
			get
			{
				return this._DepAddr1;
			}
			set
			{
				if ((this._DepAddr1 != value))
				{
					this.OnDepAddr1Changing(value);
					this.SendPropertyChanging();
					this._DepAddr1 = value;
					this.SendPropertyChanged("DepAddr1");
					this.OnDepAddr1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepAddr2", DbType="VarChar(150)")]
		public string DepAddr2
		{
			get
			{
				return this._DepAddr2;
			}
			set
			{
				if ((this._DepAddr2 != value))
				{
					this.OnDepAddr2Changing(value);
					this.SendPropertyChanging();
					this._DepAddr2 = value;
					this.SendPropertyChanged("DepAddr2");
					this.OnDepAddr2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepAddr3", DbType="VarChar(150)")]
		public string DepAddr3
		{
			get
			{
				return this._DepAddr3;
			}
			set
			{
				if ((this._DepAddr3 != value))
				{
					this.OnDepAddr3Changing(value);
					this.SendPropertyChanging();
					this._DepAddr3 = value;
					this.SendPropertyChanged("DepAddr3");
					this.OnDepAddr3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepPhone", DbType="VarChar(50)")]
		public string DepPhone
		{
			get
			{
				return this._DepPhone;
			}
			set
			{
				if ((this._DepPhone != value))
				{
					this.OnDepPhoneChanging(value);
					this.SendPropertyChanging();
					this._DepPhone = value;
					this.SendPropertyChanged("DepPhone");
					this.OnDepPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepFax", DbType="VarChar(50)")]
		public string DepFax
		{
			get
			{
				return this._DepFax;
			}
			set
			{
				if ((this._DepFax != value))
				{
					this.OnDepFaxChanging(value);
					this.SendPropertyChanging();
					this._DepFax = value;
					this.SendPropertyChanged("DepFax");
					this.OnDepFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepEmail", DbType="VarChar(50)")]
		public string DepEmail
		{
			get
			{
				return this._DepEmail;
			}
			set
			{
				if ((this._DepEmail != value))
				{
					this.OnDepEmailChanging(value);
					this.SendPropertyChanging();
					this._DepEmail = value;
					this.SendPropertyChanged("DepEmail");
					this.OnDepEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepWebAddr", DbType="VarChar(100)")]
		public string DepWebAddr
		{
			get
			{
				return this._DepWebAddr;
			}
			set
			{
				if ((this._DepWebAddr != value))
				{
					this.OnDepWebAddrChanging(value);
					this.SendPropertyChanging();
					this._DepWebAddr = value;
					this.SendPropertyChanged("DepWebAddr");
					this.OnDepWebAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_County", DbType="VarChar(50)")]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityTown", DbType="VarChar(50)")]
		public string CityTown
		{
			get
			{
				return this._CityTown;
			}
			set
			{
				if ((this._CityTown != value))
				{
					this.OnCityTownChanging(value);
					this.SendPropertyChanging();
					this._CityTown = value;
					this.SendPropertyChanged("CityTown");
					this.OnCityTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepIsActive", DbType="Int NOT NULL")]
		public int DepIsActive
		{
			get
			{
				return this._DepIsActive;
			}
			set
			{
				if ((this._DepIsActive != value))
				{
					this.OnDepIsActiveChanging(value);
					this.SendPropertyChanging();
					this._DepIsActive = value;
					this.SendPropertyChanged("DepIsActive");
					this.OnDepIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Team", Storage="_Teams", ThisKey="DepID", OtherKey="DepID")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directorate_Department", Storage="_Directorate", ThisKey="DirID", OtherKey="DirID", IsForeignKey=true)]
		public Directorate Directorate
		{
			get
			{
				return this._Directorate.Entity;
			}
			set
			{
				Directorate previousValue = this._Directorate.Entity;
				if (((previousValue != value) 
							|| (this._Directorate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directorate.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Directorate.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._DirID = value.DirID;
					}
					else
					{
						this._DirID = default(int);
					}
					this.SendPropertyChanged("Directorate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Department", Storage="_Contact", ThisKey="LeadContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._LeadContactID = value.ContactID;
					}
					else
					{
						this._LeadContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _DepID;
		
		private string _TeamName;
		
		private string _TeamShortDescription;
		
		private string _TeamFullDescription;
		
		private System.Nullable<int> _LeadContactID;
		
		private string _TypeOfBusiness;
		
		private System.Nullable<int> _TeamSICCode;
		
		private string _TeamPostCode;
		
		private string _TeamAddr1;
		
		private string _TeamAddr2;
		
		private string _TeamAddr3;
		
		private string _TeamEmail;
		
		private string _TeamWebAddr;
		
		private string _TeamPhone;
		
		private string _TeamFax;
		
		private System.Nullable<int> _CountryID;
		
		private string _County;
		
		private string _CityTown;
		
		private int _TeamIsActive;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnDepIDChanging(int value);
    partial void OnDepIDChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnTeamShortDescriptionChanging(string value);
    partial void OnTeamShortDescriptionChanged();
    partial void OnTeamFullDescriptionChanging(string value);
    partial void OnTeamFullDescriptionChanged();
    partial void OnLeadContactIDChanging(System.Nullable<int> value);
    partial void OnLeadContactIDChanged();
    partial void OnTypeOfBusinessChanging(string value);
    partial void OnTypeOfBusinessChanged();
    partial void OnTeamSICCodeChanging(System.Nullable<int> value);
    partial void OnTeamSICCodeChanged();
    partial void OnTeamPostCodeChanging(string value);
    partial void OnTeamPostCodeChanged();
    partial void OnTeamAddr1Changing(string value);
    partial void OnTeamAddr1Changed();
    partial void OnTeamAddr2Changing(string value);
    partial void OnTeamAddr2Changed();
    partial void OnTeamAddr3Changing(string value);
    partial void OnTeamAddr3Changed();
    partial void OnTeamEmailChanging(string value);
    partial void OnTeamEmailChanged();
    partial void OnTeamWebAddrChanging(string value);
    partial void OnTeamWebAddrChanged();
    partial void OnTeamPhoneChanging(string value);
    partial void OnTeamPhoneChanged();
    partial void OnTeamFaxChanging(string value);
    partial void OnTeamFaxChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnCityTownChanging(string value);
    partial void OnCityTownChanged();
    partial void OnTeamIsActiveChanging(int value);
    partial void OnTeamIsActiveChanged();
    #endregion
		
		public Team()
		{
			this._Department = default(EntityRef<Department>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepID", DbType="Int NOT NULL")]
		public int DepID
		{
			get
			{
				return this._DepID;
			}
			set
			{
				if ((this._DepID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepIDChanging(value);
					this.SendPropertyChanging();
					this._DepID = value;
					this.SendPropertyChanged("DepID");
					this.OnDepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamShortDescription", DbType="VarChar(100)")]
		public string TeamShortDescription
		{
			get
			{
				return this._TeamShortDescription;
			}
			set
			{
				if ((this._TeamShortDescription != value))
				{
					this.OnTeamShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TeamShortDescription = value;
					this.SendPropertyChanged("TeamShortDescription");
					this.OnTeamShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamFullDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TeamFullDescription
		{
			get
			{
				return this._TeamFullDescription;
			}
			set
			{
				if ((this._TeamFullDescription != value))
				{
					this.OnTeamFullDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TeamFullDescription = value;
					this.SendPropertyChanged("TeamFullDescription");
					this.OnTeamFullDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadContactID", DbType="Int")]
		public System.Nullable<int> LeadContactID
		{
			get
			{
				return this._LeadContactID;
			}
			set
			{
				if ((this._LeadContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadContactIDChanging(value);
					this.SendPropertyChanging();
					this._LeadContactID = value;
					this.SendPropertyChanged("LeadContactID");
					this.OnLeadContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfBusiness", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeOfBusiness
		{
			get
			{
				return this._TypeOfBusiness;
			}
			set
			{
				if ((this._TypeOfBusiness != value))
				{
					this.OnTypeOfBusinessChanging(value);
					this.SendPropertyChanging();
					this._TypeOfBusiness = value;
					this.SendPropertyChanged("TypeOfBusiness");
					this.OnTypeOfBusinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamSICCode", DbType="Int")]
		public System.Nullable<int> TeamSICCode
		{
			get
			{
				return this._TeamSICCode;
			}
			set
			{
				if ((this._TeamSICCode != value))
				{
					this.OnTeamSICCodeChanging(value);
					this.SendPropertyChanging();
					this._TeamSICCode = value;
					this.SendPropertyChanged("TeamSICCode");
					this.OnTeamSICCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamPostCode", DbType="VarChar(50)")]
		public string TeamPostCode
		{
			get
			{
				return this._TeamPostCode;
			}
			set
			{
				if ((this._TeamPostCode != value))
				{
					this.OnTeamPostCodeChanging(value);
					this.SendPropertyChanging();
					this._TeamPostCode = value;
					this.SendPropertyChanged("TeamPostCode");
					this.OnTeamPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamAddr1", DbType="VarChar(150)")]
		public string TeamAddr1
		{
			get
			{
				return this._TeamAddr1;
			}
			set
			{
				if ((this._TeamAddr1 != value))
				{
					this.OnTeamAddr1Changing(value);
					this.SendPropertyChanging();
					this._TeamAddr1 = value;
					this.SendPropertyChanged("TeamAddr1");
					this.OnTeamAddr1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamAddr2", DbType="VarChar(150)")]
		public string TeamAddr2
		{
			get
			{
				return this._TeamAddr2;
			}
			set
			{
				if ((this._TeamAddr2 != value))
				{
					this.OnTeamAddr2Changing(value);
					this.SendPropertyChanging();
					this._TeamAddr2 = value;
					this.SendPropertyChanged("TeamAddr2");
					this.OnTeamAddr2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamAddr3", DbType="VarChar(150)")]
		public string TeamAddr3
		{
			get
			{
				return this._TeamAddr3;
			}
			set
			{
				if ((this._TeamAddr3 != value))
				{
					this.OnTeamAddr3Changing(value);
					this.SendPropertyChanging();
					this._TeamAddr3 = value;
					this.SendPropertyChanged("TeamAddr3");
					this.OnTeamAddr3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamEmail", DbType="VarChar(50)")]
		public string TeamEmail
		{
			get
			{
				return this._TeamEmail;
			}
			set
			{
				if ((this._TeamEmail != value))
				{
					this.OnTeamEmailChanging(value);
					this.SendPropertyChanging();
					this._TeamEmail = value;
					this.SendPropertyChanged("TeamEmail");
					this.OnTeamEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamWebAddr", DbType="VarChar(100)")]
		public string TeamWebAddr
		{
			get
			{
				return this._TeamWebAddr;
			}
			set
			{
				if ((this._TeamWebAddr != value))
				{
					this.OnTeamWebAddrChanging(value);
					this.SendPropertyChanging();
					this._TeamWebAddr = value;
					this.SendPropertyChanged("TeamWebAddr");
					this.OnTeamWebAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamPhone", DbType="VarChar(50)")]
		public string TeamPhone
		{
			get
			{
				return this._TeamPhone;
			}
			set
			{
				if ((this._TeamPhone != value))
				{
					this.OnTeamPhoneChanging(value);
					this.SendPropertyChanging();
					this._TeamPhone = value;
					this.SendPropertyChanged("TeamPhone");
					this.OnTeamPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamFax", DbType="VarChar(50)")]
		public string TeamFax
		{
			get
			{
				return this._TeamFax;
			}
			set
			{
				if ((this._TeamFax != value))
				{
					this.OnTeamFaxChanging(value);
					this.SendPropertyChanging();
					this._TeamFax = value;
					this.SendPropertyChanged("TeamFax");
					this.OnTeamFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_County", DbType="VarChar(50)")]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityTown", DbType="VarChar(50)")]
		public string CityTown
		{
			get
			{
				return this._CityTown;
			}
			set
			{
				if ((this._CityTown != value))
				{
					this.OnCityTownChanging(value);
					this.SendPropertyChanging();
					this._CityTown = value;
					this.SendPropertyChanged("CityTown");
					this.OnCityTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamIsActive", DbType="Int NOT NULL")]
		public int TeamIsActive
		{
			get
			{
				return this._TeamIsActive;
			}
			set
			{
				if ((this._TeamIsActive != value))
				{
					this.OnTeamIsActiveChanging(value);
					this.SendPropertyChanging();
					this._TeamIsActive = value;
					this.SendPropertyChanged("TeamIsActive");
					this.OnTeamIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Team", Storage="_Department", ThisKey="DepID", OtherKey="DepID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._DepID = value.DepID;
					}
					else
					{
						this._DepID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Team", Storage="_Contact", ThisKey="LeadContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._LeadContactID = value.ContactID;
					}
					else
					{
						this._LeadContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupportingMaterial")]
	public partial class SupportingMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatID;
		
		private int _OrgID;
		
		private int _UserID;
		
		private string _MatURL;
		
		private string _MatDescription;
		
		private string _MatType;
		
		private System.DateTime _MatAddDate;
		
		private int _MatIsActive;
		
		private EntityRef<User> _User;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatIDChanging(int value);
    partial void OnMatIDChanged();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnMatURLChanging(string value);
    partial void OnMatURLChanged();
    partial void OnMatDescriptionChanging(string value);
    partial void OnMatDescriptionChanged();
    partial void OnMatTypeChanging(string value);
    partial void OnMatTypeChanged();
    partial void OnMatAddDateChanging(System.DateTime value);
    partial void OnMatAddDateChanged();
    partial void OnMatIsActiveChanging(int value);
    partial void OnMatIsActiveChanged();
    #endregion
		
		public SupportingMaterial()
		{
			this._User = default(EntityRef<User>);
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatID
		{
			get
			{
				return this._MatID;
			}
			set
			{
				if ((this._MatID != value))
				{
					this.OnMatIDChanging(value);
					this.SendPropertyChanging();
					this._MatID = value;
					this.SendPropertyChanged("MatID");
					this.OnMatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL")]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatURL", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MatURL
		{
			get
			{
				return this._MatURL;
			}
			set
			{
				if ((this._MatURL != value))
				{
					this.OnMatURLChanging(value);
					this.SendPropertyChanging();
					this._MatURL = value;
					this.SendPropertyChanged("MatURL");
					this.OnMatURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string MatDescription
		{
			get
			{
				return this._MatDescription;
			}
			set
			{
				if ((this._MatDescription != value))
				{
					this.OnMatDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MatDescription = value;
					this.SendPropertyChanged("MatDescription");
					this.OnMatDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatType", DbType="VarChar(50)")]
		public string MatType
		{
			get
			{
				return this._MatType;
			}
			set
			{
				if ((this._MatType != value))
				{
					this.OnMatTypeChanging(value);
					this.SendPropertyChanging();
					this._MatType = value;
					this.SendPropertyChanged("MatType");
					this.OnMatTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatAddDate", DbType="Date NOT NULL")]
		public System.DateTime MatAddDate
		{
			get
			{
				return this._MatAddDate;
			}
			set
			{
				if ((this._MatAddDate != value))
				{
					this.OnMatAddDateChanging(value);
					this.SendPropertyChanging();
					this._MatAddDate = value;
					this.SendPropertyChanged("MatAddDate");
					this.OnMatAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatIsActive", DbType="Int NOT NULL")]
		public int MatIsActive
		{
			get
			{
				return this._MatIsActive;
			}
			set
			{
				if ((this._MatIsActive != value))
				{
					this.OnMatIsActiveChanging(value);
					this.SendPropertyChanging();
					this._MatIsActive = value;
					this.SendPropertyChanged("MatIsActive");
					this.OnMatIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SupportingMaterial", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SupportingMaterials.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SupportingMaterials.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_SupportingMaterial", Storage="_Organisation", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.SupportingMaterials.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.SupportingMaterials.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _CountryName;
		
		private EntitySet<TrustRegion> _TrustRegions;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<GovOfficeRegion> _GovOfficeRegions;
		
		private EntitySet<Premise> _Premises;
		
		private EntitySet<County> _Counties;
		
		private EntitySet<Town> _Towns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public Country()
		{
			this._TrustRegions = new EntitySet<TrustRegion>(new Action<TrustRegion>(this.attach_TrustRegions), new Action<TrustRegion>(this.detach_TrustRegions));
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._GovOfficeRegions = new EntitySet<GovOfficeRegion>(new Action<GovOfficeRegion>(this.attach_GovOfficeRegions), new Action<GovOfficeRegion>(this.detach_GovOfficeRegions));
			this._Premises = new EntitySet<Premise>(new Action<Premise>(this.attach_Premises), new Action<Premise>(this.detach_Premises));
			this._Counties = new EntitySet<County>(new Action<County>(this.attach_Counties), new Action<County>(this.detach_Counties));
			this._Towns = new EntitySet<Town>(new Action<Town>(this.attach_Towns), new Action<Town>(this.detach_Towns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_TrustRegion", Storage="_TrustRegions", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<TrustRegion> TrustRegions
		{
			get
			{
				return this._TrustRegions;
			}
			set
			{
				this._TrustRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Addresses", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_GovOfficeRegion", Storage="_GovOfficeRegions", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<GovOfficeRegion> GovOfficeRegions
		{
			get
			{
				return this._GovOfficeRegions;
			}
			set
			{
				this._GovOfficeRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Premise", Storage="_Premises", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Premise> Premises
		{
			get
			{
				return this._Premises;
			}
			set
			{
				this._Premises.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_County", Storage="_Counties", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<County> Counties
		{
			get
			{
				return this._Counties;
			}
			set
			{
				this._Counties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Town", Storage="_Towns", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Town> Towns
		{
			get
			{
				return this._Towns;
			}
			set
			{
				this._Towns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrustRegions(TrustRegion entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_TrustRegions(TrustRegion entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_GovOfficeRegions(GovOfficeRegion entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_GovOfficeRegions(GovOfficeRegion entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Premises(Premise entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Premises(Premise entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Counties(County entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Counties(County entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Towns(Town entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Towns(Town entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrustDistrict")]
	public partial class TrustDistrict : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrustDistrictID;
		
		private int _TrustRegionID;
		
		private string _TrustDistrictName;
		
		private string _TrustDistrictDescription;
		
		private int _TrustDistrictIsActive;
		
		private EntityRef<TrustRegion> _TrustRegion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrustDistrictIDChanging(int value);
    partial void OnTrustDistrictIDChanged();
    partial void OnTrustRegionIDChanging(int value);
    partial void OnTrustRegionIDChanged();
    partial void OnTrustDistrictNameChanging(string value);
    partial void OnTrustDistrictNameChanged();
    partial void OnTrustDistrictDescriptionChanging(string value);
    partial void OnTrustDistrictDescriptionChanged();
    partial void OnTrustDistrictIsActiveChanging(int value);
    partial void OnTrustDistrictIsActiveChanged();
    #endregion
		
		public TrustDistrict()
		{
			this._TrustRegion = default(EntityRef<TrustRegion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustDistrictID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrustDistrictID
		{
			get
			{
				return this._TrustDistrictID;
			}
			set
			{
				if ((this._TrustDistrictID != value))
				{
					this.OnTrustDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._TrustDistrictID = value;
					this.SendPropertyChanged("TrustDistrictID");
					this.OnTrustDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustRegionID", DbType="Int NOT NULL")]
		public int TrustRegionID
		{
			get
			{
				return this._TrustRegionID;
			}
			set
			{
				if ((this._TrustRegionID != value))
				{
					if (this._TrustRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrustRegionIDChanging(value);
					this.SendPropertyChanging();
					this._TrustRegionID = value;
					this.SendPropertyChanged("TrustRegionID");
					this.OnTrustRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustDistrictName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TrustDistrictName
		{
			get
			{
				return this._TrustDistrictName;
			}
			set
			{
				if ((this._TrustDistrictName != value))
				{
					this.OnTrustDistrictNameChanging(value);
					this.SendPropertyChanging();
					this._TrustDistrictName = value;
					this.SendPropertyChanged("TrustDistrictName");
					this.OnTrustDistrictNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustDistrictDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TrustDistrictDescription
		{
			get
			{
				return this._TrustDistrictDescription;
			}
			set
			{
				if ((this._TrustDistrictDescription != value))
				{
					this.OnTrustDistrictDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TrustDistrictDescription = value;
					this.SendPropertyChanged("TrustDistrictDescription");
					this.OnTrustDistrictDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustDistrictIsActive", DbType="Int NOT NULL")]
		public int TrustDistrictIsActive
		{
			get
			{
				return this._TrustDistrictIsActive;
			}
			set
			{
				if ((this._TrustDistrictIsActive != value))
				{
					this.OnTrustDistrictIsActiveChanging(value);
					this.SendPropertyChanging();
					this._TrustDistrictIsActive = value;
					this.SendPropertyChanged("TrustDistrictIsActive");
					this.OnTrustDistrictIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrustRegion_TrustDistrict", Storage="_TrustRegion", ThisKey="TrustRegionID", OtherKey="TrustRegionID", IsForeignKey=true)]
		public TrustRegion TrustRegion
		{
			get
			{
				return this._TrustRegion.Entity;
			}
			set
			{
				TrustRegion previousValue = this._TrustRegion.Entity;
				if (((previousValue != value) 
							|| (this._TrustRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrustRegion.Entity = null;
						previousValue.TrustDistricts.Remove(this);
					}
					this._TrustRegion.Entity = value;
					if ((value != null))
					{
						value.TrustDistricts.Add(this);
						this._TrustRegionID = value.TrustRegionID;
					}
					else
					{
						this._TrustRegionID = default(int);
					}
					this.SendPropertyChanged("TrustRegion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrustRegion")]
	public partial class TrustRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrustRegionID;
		
		private int _CountryID;
		
		private string _TrustRegionName;
		
		private string _TrustRegionDescription;
		
		private int _TrustRegionIsActive;
		
		private EntitySet<TrustDistrict> _TrustDistricts;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrustRegionIDChanging(int value);
    partial void OnTrustRegionIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnTrustRegionNameChanging(string value);
    partial void OnTrustRegionNameChanged();
    partial void OnTrustRegionDescriptionChanging(string value);
    partial void OnTrustRegionDescriptionChanged();
    partial void OnTrustRegionIsActiveChanging(int value);
    partial void OnTrustRegionIsActiveChanged();
    #endregion
		
		public TrustRegion()
		{
			this._TrustDistricts = new EntitySet<TrustDistrict>(new Action<TrustDistrict>(this.attach_TrustDistricts), new Action<TrustDistrict>(this.detach_TrustDistricts));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustRegionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrustRegionID
		{
			get
			{
				return this._TrustRegionID;
			}
			set
			{
				if ((this._TrustRegionID != value))
				{
					this.OnTrustRegionIDChanging(value);
					this.SendPropertyChanging();
					this._TrustRegionID = value;
					this.SendPropertyChanged("TrustRegionID");
					this.OnTrustRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustRegionName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TrustRegionName
		{
			get
			{
				return this._TrustRegionName;
			}
			set
			{
				if ((this._TrustRegionName != value))
				{
					this.OnTrustRegionNameChanging(value);
					this.SendPropertyChanging();
					this._TrustRegionName = value;
					this.SendPropertyChanged("TrustRegionName");
					this.OnTrustRegionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustRegionDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TrustRegionDescription
		{
			get
			{
				return this._TrustRegionDescription;
			}
			set
			{
				if ((this._TrustRegionDescription != value))
				{
					this.OnTrustRegionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TrustRegionDescription = value;
					this.SendPropertyChanged("TrustRegionDescription");
					this.OnTrustRegionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustRegionIsActive", DbType="Int NOT NULL")]
		public int TrustRegionIsActive
		{
			get
			{
				return this._TrustRegionIsActive;
			}
			set
			{
				if ((this._TrustRegionIsActive != value))
				{
					this.OnTrustRegionIsActiveChanging(value);
					this.SendPropertyChanging();
					this._TrustRegionIsActive = value;
					this.SendPropertyChanged("TrustRegionIsActive");
					this.OnTrustRegionIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrustRegion_TrustDistrict", Storage="_TrustDistricts", ThisKey="TrustRegionID", OtherKey="TrustRegionID")]
		public EntitySet<TrustDistrict> TrustDistricts
		{
			get
			{
				return this._TrustDistricts;
			}
			set
			{
				this._TrustDistricts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_TrustRegion", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.TrustRegions.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.TrustRegions.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrustDistricts(TrustDistrict entity)
		{
			this.SendPropertyChanging();
			entity.TrustRegion = this;
		}
		
		private void detach_TrustDistricts(TrustDistrict entity)
		{
			this.SendPropertyChanging();
			entity.TrustRegion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferenceData")]
	public partial class ReferenceData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RefValue;
		
		private string _RefName;
		
		private string _RefText;
		
		private string _RefFrom;
		
		private int _RefType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefValueChanging(int value);
    partial void OnRefValueChanged();
    partial void OnRefNameChanging(string value);
    partial void OnRefNameChanged();
    partial void OnRefTextChanging(string value);
    partial void OnRefTextChanged();
    partial void OnRefFromChanging(string value);
    partial void OnRefFromChanged();
    partial void OnRefTypeChanging(int value);
    partial void OnRefTypeChanged();
    #endregion
		
		public ReferenceData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefValue", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RefValue
		{
			get
			{
				return this._RefValue;
			}
			set
			{
				if ((this._RefValue != value))
				{
					this.OnRefValueChanging(value);
					this.SendPropertyChanging();
					this._RefValue = value;
					this.SendPropertyChanged("RefValue");
					this.OnRefValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefName", DbType="VarChar(100)")]
		public string RefName
		{
			get
			{
				return this._RefName;
			}
			set
			{
				if ((this._RefName != value))
				{
					this.OnRefNameChanging(value);
					this.SendPropertyChanging();
					this._RefName = value;
					this.SendPropertyChanged("RefName");
					this.OnRefNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefText", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RefText
		{
			get
			{
				return this._RefText;
			}
			set
			{
				if ((this._RefText != value))
				{
					this.OnRefTextChanging(value);
					this.SendPropertyChanging();
					this._RefText = value;
					this.SendPropertyChanged("RefText");
					this.OnRefTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefFrom", DbType="VarChar(50)")]
		public string RefFrom
		{
			get
			{
				return this._RefFrom;
			}
			set
			{
				if ((this._RefFrom != value))
				{
					this.OnRefFromChanging(value);
					this.SendPropertyChanging();
					this._RefFrom = value;
					this.SendPropertyChanged("RefFrom");
					this.OnRefFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefType", DbType="Int NOT NULL")]
		public int RefType
		{
			get
			{
				return this._RefType;
			}
			set
			{
				if ((this._RefType != value))
				{
					this.OnRefTypeChanging(value);
					this.SendPropertyChanging();
					this._RefType = value;
					this.SendPropertyChanged("RefType");
					this.OnRefTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactID;
		
		private string _FirstName;
		
		private string _Surname;
		
		private System.Nullable<int> _ManagerID;
		
		private string _ContactType;
		
		private string _BestContactMethod;
		
		private string _KnownAs;
		
		private string _JobRole;
		
		private string _OfficePhone;
		
		private string _MobilePhone;
		
		private string _STHomePhone;
		
		private string _EmailAddress;
		
		private string _Workbase;
		
		private string _JobTitle;
		
		private int _ContactIsActive;
		
		private EntitySet<Directorate> _Directorates;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<Contact> _Contacts;
		
		private EntitySet<FundingDetail> _FundingDetails;
		
		private EntitySet<PremiseDetail> _PremiseDetails;
		
		private EntitySet<PremiseDetail> _PremiseDetails1;
		
		private EntitySet<PremiseDetail> _PremiseDetails2;
		
		private EntitySet<Facility> _Facilities;
		
		private EntitySet<Facility> _Facilities1;
		
		private EntitySet<Volunteering> _Volunteerings;
		
		private EntitySet<ProjectMinorWork> _ProjectMinorWorks;
		
		private EntitySet<ProjectMinorWork> _ProjectMinorWorks1;
		
		private EntitySet<Organisation> _Organisations;
		
		private EntitySet<Programme> _Programmes;
		
		private EntitySet<Premise> _Premises;
		
		private EntitySet<Service> _Services;
		
		private EntityRef<Contact> _Contact1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnManagerIDChanging(System.Nullable<int> value);
    partial void OnManagerIDChanged();
    partial void OnContactTypeChanging(string value);
    partial void OnContactTypeChanged();
    partial void OnBestContactMethodChanging(string value);
    partial void OnBestContactMethodChanged();
    partial void OnKnownAsChanging(string value);
    partial void OnKnownAsChanged();
    partial void OnJobRoleChanging(string value);
    partial void OnJobRoleChanged();
    partial void OnOfficePhoneChanging(string value);
    partial void OnOfficePhoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnSTHomePhoneChanging(string value);
    partial void OnSTHomePhoneChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnWorkbaseChanging(string value);
    partial void OnWorkbaseChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnContactIsActiveChanging(int value);
    partial void OnContactIsActiveChanged();
    #endregion
		
		public Contact()
		{
			this._Directorates = new EntitySet<Directorate>(new Action<Directorate>(this.attach_Directorates), new Action<Directorate>(this.detach_Directorates));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._FundingDetails = new EntitySet<FundingDetail>(new Action<FundingDetail>(this.attach_FundingDetails), new Action<FundingDetail>(this.detach_FundingDetails));
			this._PremiseDetails = new EntitySet<PremiseDetail>(new Action<PremiseDetail>(this.attach_PremiseDetails), new Action<PremiseDetail>(this.detach_PremiseDetails));
			this._PremiseDetails1 = new EntitySet<PremiseDetail>(new Action<PremiseDetail>(this.attach_PremiseDetails1), new Action<PremiseDetail>(this.detach_PremiseDetails1));
			this._PremiseDetails2 = new EntitySet<PremiseDetail>(new Action<PremiseDetail>(this.attach_PremiseDetails2), new Action<PremiseDetail>(this.detach_PremiseDetails2));
			this._Facilities = new EntitySet<Facility>(new Action<Facility>(this.attach_Facilities), new Action<Facility>(this.detach_Facilities));
			this._Facilities1 = new EntitySet<Facility>(new Action<Facility>(this.attach_Facilities1), new Action<Facility>(this.detach_Facilities1));
			this._Volunteerings = new EntitySet<Volunteering>(new Action<Volunteering>(this.attach_Volunteerings), new Action<Volunteering>(this.detach_Volunteerings));
			this._ProjectMinorWorks = new EntitySet<ProjectMinorWork>(new Action<ProjectMinorWork>(this.attach_ProjectMinorWorks), new Action<ProjectMinorWork>(this.detach_ProjectMinorWorks));
			this._ProjectMinorWorks1 = new EntitySet<ProjectMinorWork>(new Action<ProjectMinorWork>(this.attach_ProjectMinorWorks1), new Action<ProjectMinorWork>(this.detach_ProjectMinorWorks1));
			this._Organisations = new EntitySet<Organisation>(new Action<Organisation>(this.attach_Organisations), new Action<Organisation>(this.detach_Organisations));
			this._Programmes = new EntitySet<Programme>(new Action<Programme>(this.attach_Programmes), new Action<Programme>(this.detach_Programmes));
			this._Premises = new EntitySet<Premise>(new Action<Premise>(this.attach_Premises), new Action<Premise>(this.detach_Premises));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Contact1 = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerID", DbType="Int")]
		public System.Nullable<int> ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					if (this._Contact1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactType
		{
			get
			{
				return this._ContactType;
			}
			set
			{
				if ((this._ContactType != value))
				{
					this.OnContactTypeChanging(value);
					this.SendPropertyChanging();
					this._ContactType = value;
					this.SendPropertyChanged("ContactType");
					this.OnContactTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BestContactMethod", DbType="VarChar(50)")]
		public string BestContactMethod
		{
			get
			{
				return this._BestContactMethod;
			}
			set
			{
				if ((this._BestContactMethod != value))
				{
					this.OnBestContactMethodChanging(value);
					this.SendPropertyChanging();
					this._BestContactMethod = value;
					this.SendPropertyChanged("BestContactMethod");
					this.OnBestContactMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnownAs", DbType="VarChar(100)")]
		public string KnownAs
		{
			get
			{
				return this._KnownAs;
			}
			set
			{
				if ((this._KnownAs != value))
				{
					this.OnKnownAsChanging(value);
					this.SendPropertyChanging();
					this._KnownAs = value;
					this.SendPropertyChanged("KnownAs");
					this.OnKnownAsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobRole", DbType="VarChar(100)")]
		public string JobRole
		{
			get
			{
				return this._JobRole;
			}
			set
			{
				if ((this._JobRole != value))
				{
					this.OnJobRoleChanging(value);
					this.SendPropertyChanging();
					this._JobRole = value;
					this.SendPropertyChanged("JobRole");
					this.OnJobRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficePhone", DbType="VarChar(20)")]
		public string OfficePhone
		{
			get
			{
				return this._OfficePhone;
			}
			set
			{
				if ((this._OfficePhone != value))
				{
					this.OnOfficePhoneChanging(value);
					this.SendPropertyChanging();
					this._OfficePhone = value;
					this.SendPropertyChanged("OfficePhone");
					this.OnOfficePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="VarChar(20)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STHomePhone", DbType="VarChar(20)")]
		public string STHomePhone
		{
			get
			{
				return this._STHomePhone;
			}
			set
			{
				if ((this._STHomePhone != value))
				{
					this.OnSTHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._STHomePhone = value;
					this.SendPropertyChanged("STHomePhone");
					this.OnSTHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(50)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Workbase", DbType="VarChar(100)")]
		public string Workbase
		{
			get
			{
				return this._Workbase;
			}
			set
			{
				if ((this._Workbase != value))
				{
					this.OnWorkbaseChanging(value);
					this.SendPropertyChanging();
					this._Workbase = value;
					this.SendPropertyChanged("Workbase");
					this.OnWorkbaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="VarChar(100)")]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactIsActive", DbType="Int NOT NULL")]
		public int ContactIsActive
		{
			get
			{
				return this._ContactIsActive;
			}
			set
			{
				if ((this._ContactIsActive != value))
				{
					this.OnContactIsActiveChanging(value);
					this.SendPropertyChanging();
					this._ContactIsActive = value;
					this.SendPropertyChanged("ContactIsActive");
					this.OnContactIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Directorate", Storage="_Directorates", ThisKey="ContactID", OtherKey="LeadContactID")]
		public EntitySet<Directorate> Directorates
		{
			get
			{
				return this._Directorates;
			}
			set
			{
				this._Directorates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Department", Storage="_Departments", ThisKey="ContactID", OtherKey="LeadContactID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Team", Storage="_Teams", ThisKey="ContactID", OtherKey="LeadContactID")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Contact", Storage="_Contacts", ThisKey="ContactID", OtherKey="ManagerID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_FundingDetail", Storage="_FundingDetails", ThisKey="ContactID", OtherKey="FundingContractDetail")]
		public EntitySet<FundingDetail> FundingDetails
		{
			get
			{
				return this._FundingDetails;
			}
			set
			{
				this._FundingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PremiseDetail", Storage="_PremiseDetails", ThisKey="ContactID", OtherKey="CateringContact")]
		public EntitySet<PremiseDetail> PremiseDetails
		{
			get
			{
				return this._PremiseDetails;
			}
			set
			{
				this._PremiseDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PremiseDetail1", Storage="_PremiseDetails1", ThisKey="ContactID", OtherKey="HostingContact")]
		public EntitySet<PremiseDetail> PremiseDetails1
		{
			get
			{
				return this._PremiseDetails1;
			}
			set
			{
				this._PremiseDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PremiseDetail2", Storage="_PremiseDetails2", ThisKey="ContactID", OtherKey="MediaContact")]
		public EntitySet<PremiseDetail> PremiseDetails2
		{
			get
			{
				return this._PremiseDetails2;
			}
			set
			{
				this._PremiseDetails2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Facility", Storage="_Facilities", ThisKey="ContactID", OtherKey="LeadContact")]
		public EntitySet<Facility> Facilities
		{
			get
			{
				return this._Facilities;
			}
			set
			{
				this._Facilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Facility1", Storage="_Facilities1", ThisKey="ContactID", OtherKey="RoomHost")]
		public EntitySet<Facility> Facilities1
		{
			get
			{
				return this._Facilities1;
			}
			set
			{
				this._Facilities1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Volunteering", Storage="_Volunteerings", ThisKey="ContactID", OtherKey="VolunteeringContact")]
		public EntitySet<Volunteering> Volunteerings
		{
			get
			{
				return this._Volunteerings;
			}
			set
			{
				this._Volunteerings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_ProjectMinorWork", Storage="_ProjectMinorWorks", ThisKey="ContactID", OtherKey="AuthorisedByName")]
		public EntitySet<ProjectMinorWork> ProjectMinorWorks
		{
			get
			{
				return this._ProjectMinorWorks;
			}
			set
			{
				this._ProjectMinorWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_ProjectMinorWork1", Storage="_ProjectMinorWorks1", ThisKey="ContactID", OtherKey="PMWContact")]
		public EntitySet<ProjectMinorWork> ProjectMinorWorks1
		{
			get
			{
				return this._ProjectMinorWorks1;
			}
			set
			{
				this._ProjectMinorWorks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Organisation", Storage="_Organisations", ThisKey="ContactID", OtherKey="LeadContactID")]
		public EntitySet<Organisation> Organisations
		{
			get
			{
				return this._Organisations;
			}
			set
			{
				this._Organisations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Programme", Storage="_Programmes", ThisKey="ContactID", OtherKey="ContactID")]
		public EntitySet<Programme> Programmes
		{
			get
			{
				return this._Programmes;
			}
			set
			{
				this._Programmes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Premise", Storage="_Premises", ThisKey="ContactID", OtherKey="LocationOrganisation")]
		public EntitySet<Premise> Premises
		{
			get
			{
				return this._Premises;
			}
			set
			{
				this._Premises.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Service", Storage="_Services", ThisKey="ContactID", OtherKey="LeadContactID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Contact", Storage="_Contact1", ThisKey="ManagerID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact1
		{
			get
			{
				return this._Contact1.Entity;
			}
			set
			{
				Contact previousValue = this._Contact1.Entity;
				if (((previousValue != value) 
							|| (this._Contact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact1.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Contact1.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._ManagerID = value.ContactID;
					}
					else
					{
						this._ManagerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Directorates(Directorate entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Directorates(Directorate entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = null;
		}
		
		private void attach_FundingDetails(FundingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_FundingDetails(FundingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_PremiseDetails(PremiseDetail entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_PremiseDetails(PremiseDetail entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_PremiseDetails1(PremiseDetail entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = this;
		}
		
		private void detach_PremiseDetails1(PremiseDetail entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = null;
		}
		
		private void attach_PremiseDetails2(PremiseDetail entity)
		{
			this.SendPropertyChanging();
			entity.Contact2 = this;
		}
		
		private void detach_PremiseDetails2(PremiseDetail entity)
		{
			this.SendPropertyChanging();
			entity.Contact2 = null;
		}
		
		private void attach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Facilities1(Facility entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = this;
		}
		
		private void detach_Facilities1(Facility entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = null;
		}
		
		private void attach_Volunteerings(Volunteering entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Volunteerings(Volunteering entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_ProjectMinorWorks(ProjectMinorWork entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_ProjectMinorWorks(ProjectMinorWork entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_ProjectMinorWorks1(ProjectMinorWork entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = this;
		}
		
		private void detach_ProjectMinorWorks1(ProjectMinorWork entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = null;
		}
		
		private void attach_Organisations(Organisation entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Organisations(Organisation entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Programmes(Programme entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Programmes(Programme entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Premises(Premise entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Premises(Premise entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FundingDetail")]
	public partial class FundingDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SerID;
		
		private string _FundingSource;
		
		private string _FundingNeeds;
		
		private int _FundingContractDetail;
		
		private decimal _FundingAmount;
		
		private int _FundingContinuationNeeded;
		
		private System.Nullable<decimal> _FundingContinuationAmount;
		
		private string _FundingContinuationDetail;
		
		private string _FundraisingForText;
		
		private string _FundraisingWhy;
		
		private string _FundraisingNeeds;
		
		private System.Nullable<System.DateTime> _FundraisingRequiredBy;
		
		private int _FundraisingComplete;
		
		private System.Nullable<System.DateTime> _FundraisingCompletedDate;
		
		private int _FundraisingDonorAnonymous;
		
		private System.Nullable<decimal> _FundraisingDonorAmount;
		
		private System.Nullable<System.DateTime> _FundraisingDonationDate;
		
		private int _FundraisingDonationIncremental;
		
		private System.Nullable<System.DateTime> _FundingStart;
		
		private System.Nullable<System.DateTime> _FundingEnd;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSerIDChanging(int value);
    partial void OnSerIDChanged();
    partial void OnFundingSourceChanging(string value);
    partial void OnFundingSourceChanged();
    partial void OnFundingNeedsChanging(string value);
    partial void OnFundingNeedsChanged();
    partial void OnFundingContractDetailChanging(int value);
    partial void OnFundingContractDetailChanged();
    partial void OnFundingAmountChanging(decimal value);
    partial void OnFundingAmountChanged();
    partial void OnFundingContinuationNeededChanging(int value);
    partial void OnFundingContinuationNeededChanged();
    partial void OnFundingContinuationAmountChanging(System.Nullable<decimal> value);
    partial void OnFundingContinuationAmountChanged();
    partial void OnFundingContinuationDetailChanging(string value);
    partial void OnFundingContinuationDetailChanged();
    partial void OnFundraisingForTextChanging(string value);
    partial void OnFundraisingForTextChanged();
    partial void OnFundraisingWhyChanging(string value);
    partial void OnFundraisingWhyChanged();
    partial void OnFundraisingNeedsChanging(string value);
    partial void OnFundraisingNeedsChanged();
    partial void OnFundraisingRequiredByChanging(System.Nullable<System.DateTime> value);
    partial void OnFundraisingRequiredByChanged();
    partial void OnFundraisingCompleteChanging(int value);
    partial void OnFundraisingCompleteChanged();
    partial void OnFundraisingCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFundraisingCompletedDateChanged();
    partial void OnFundraisingDonorAnonymousChanging(int value);
    partial void OnFundraisingDonorAnonymousChanged();
    partial void OnFundraisingDonorAmountChanging(System.Nullable<decimal> value);
    partial void OnFundraisingDonorAmountChanged();
    partial void OnFundraisingDonationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFundraisingDonationDateChanged();
    partial void OnFundraisingDonationIncrementalChanging(int value);
    partial void OnFundraisingDonationIncrementalChanged();
    partial void OnFundingStartChanging(System.Nullable<System.DateTime> value);
    partial void OnFundingStartChanged();
    partial void OnFundingEndChanging(System.Nullable<System.DateTime> value);
    partial void OnFundingEndChanged();
    #endregion
		
		public FundingDetail()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SerID
		{
			get
			{
				return this._SerID;
			}
			set
			{
				if ((this._SerID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSerIDChanging(value);
					this.SendPropertyChanging();
					this._SerID = value;
					this.SendPropertyChanged("SerID");
					this.OnSerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingSource", DbType="VarChar(20)")]
		public string FundingSource
		{
			get
			{
				return this._FundingSource;
			}
			set
			{
				if ((this._FundingSource != value))
				{
					this.OnFundingSourceChanging(value);
					this.SendPropertyChanging();
					this._FundingSource = value;
					this.SendPropertyChanged("FundingSource");
					this.OnFundingSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingNeeds", DbType="VarChar(100)")]
		public string FundingNeeds
		{
			get
			{
				return this._FundingNeeds;
			}
			set
			{
				if ((this._FundingNeeds != value))
				{
					this.OnFundingNeedsChanging(value);
					this.SendPropertyChanging();
					this._FundingNeeds = value;
					this.SendPropertyChanged("FundingNeeds");
					this.OnFundingNeedsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingContractDetail", DbType="Int NOT NULL")]
		public int FundingContractDetail
		{
			get
			{
				return this._FundingContractDetail;
			}
			set
			{
				if ((this._FundingContractDetail != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundingContractDetailChanging(value);
					this.SendPropertyChanging();
					this._FundingContractDetail = value;
					this.SendPropertyChanged("FundingContractDetail");
					this.OnFundingContractDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingAmount", DbType="Decimal(11,2) NOT NULL")]
		public decimal FundingAmount
		{
			get
			{
				return this._FundingAmount;
			}
			set
			{
				if ((this._FundingAmount != value))
				{
					this.OnFundingAmountChanging(value);
					this.SendPropertyChanging();
					this._FundingAmount = value;
					this.SendPropertyChanged("FundingAmount");
					this.OnFundingAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingContinuationNeeded", DbType="Int NOT NULL")]
		public int FundingContinuationNeeded
		{
			get
			{
				return this._FundingContinuationNeeded;
			}
			set
			{
				if ((this._FundingContinuationNeeded != value))
				{
					this.OnFundingContinuationNeededChanging(value);
					this.SendPropertyChanging();
					this._FundingContinuationNeeded = value;
					this.SendPropertyChanged("FundingContinuationNeeded");
					this.OnFundingContinuationNeededChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingContinuationAmount", DbType="Decimal(11,2)")]
		public System.Nullable<decimal> FundingContinuationAmount
		{
			get
			{
				return this._FundingContinuationAmount;
			}
			set
			{
				if ((this._FundingContinuationAmount != value))
				{
					this.OnFundingContinuationAmountChanging(value);
					this.SendPropertyChanging();
					this._FundingContinuationAmount = value;
					this.SendPropertyChanged("FundingContinuationAmount");
					this.OnFundingContinuationAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingContinuationDetail", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string FundingContinuationDetail
		{
			get
			{
				return this._FundingContinuationDetail;
			}
			set
			{
				if ((this._FundingContinuationDetail != value))
				{
					this.OnFundingContinuationDetailChanging(value);
					this.SendPropertyChanging();
					this._FundingContinuationDetail = value;
					this.SendPropertyChanged("FundingContinuationDetail");
					this.OnFundingContinuationDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingForText", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string FundraisingForText
		{
			get
			{
				return this._FundraisingForText;
			}
			set
			{
				if ((this._FundraisingForText != value))
				{
					this.OnFundraisingForTextChanging(value);
					this.SendPropertyChanging();
					this._FundraisingForText = value;
					this.SendPropertyChanged("FundraisingForText");
					this.OnFundraisingForTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingWhy", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string FundraisingWhy
		{
			get
			{
				return this._FundraisingWhy;
			}
			set
			{
				if ((this._FundraisingWhy != value))
				{
					this.OnFundraisingWhyChanging(value);
					this.SendPropertyChanging();
					this._FundraisingWhy = value;
					this.SendPropertyChanged("FundraisingWhy");
					this.OnFundraisingWhyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingNeeds", DbType="VarChar(100)")]
		public string FundraisingNeeds
		{
			get
			{
				return this._FundraisingNeeds;
			}
			set
			{
				if ((this._FundraisingNeeds != value))
				{
					this.OnFundraisingNeedsChanging(value);
					this.SendPropertyChanging();
					this._FundraisingNeeds = value;
					this.SendPropertyChanged("FundraisingNeeds");
					this.OnFundraisingNeedsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingRequiredBy", DbType="Date")]
		public System.Nullable<System.DateTime> FundraisingRequiredBy
		{
			get
			{
				return this._FundraisingRequiredBy;
			}
			set
			{
				if ((this._FundraisingRequiredBy != value))
				{
					this.OnFundraisingRequiredByChanging(value);
					this.SendPropertyChanging();
					this._FundraisingRequiredBy = value;
					this.SendPropertyChanged("FundraisingRequiredBy");
					this.OnFundraisingRequiredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingComplete", DbType="Int NOT NULL")]
		public int FundraisingComplete
		{
			get
			{
				return this._FundraisingComplete;
			}
			set
			{
				if ((this._FundraisingComplete != value))
				{
					this.OnFundraisingCompleteChanging(value);
					this.SendPropertyChanging();
					this._FundraisingComplete = value;
					this.SendPropertyChanged("FundraisingComplete");
					this.OnFundraisingCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingCompletedDate", DbType="Date")]
		public System.Nullable<System.DateTime> FundraisingCompletedDate
		{
			get
			{
				return this._FundraisingCompletedDate;
			}
			set
			{
				if ((this._FundraisingCompletedDate != value))
				{
					this.OnFundraisingCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._FundraisingCompletedDate = value;
					this.SendPropertyChanged("FundraisingCompletedDate");
					this.OnFundraisingCompletedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingDonorAnonymous", DbType="Int NOT NULL")]
		public int FundraisingDonorAnonymous
		{
			get
			{
				return this._FundraisingDonorAnonymous;
			}
			set
			{
				if ((this._FundraisingDonorAnonymous != value))
				{
					this.OnFundraisingDonorAnonymousChanging(value);
					this.SendPropertyChanging();
					this._FundraisingDonorAnonymous = value;
					this.SendPropertyChanged("FundraisingDonorAnonymous");
					this.OnFundraisingDonorAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingDonorAmount", DbType="Decimal(11,2)")]
		public System.Nullable<decimal> FundraisingDonorAmount
		{
			get
			{
				return this._FundraisingDonorAmount;
			}
			set
			{
				if ((this._FundraisingDonorAmount != value))
				{
					this.OnFundraisingDonorAmountChanging(value);
					this.SendPropertyChanging();
					this._FundraisingDonorAmount = value;
					this.SendPropertyChanged("FundraisingDonorAmount");
					this.OnFundraisingDonorAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingDonationDate", DbType="Date")]
		public System.Nullable<System.DateTime> FundraisingDonationDate
		{
			get
			{
				return this._FundraisingDonationDate;
			}
			set
			{
				if ((this._FundraisingDonationDate != value))
				{
					this.OnFundraisingDonationDateChanging(value);
					this.SendPropertyChanging();
					this._FundraisingDonationDate = value;
					this.SendPropertyChanged("FundraisingDonationDate");
					this.OnFundraisingDonationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingDonationIncremental", DbType="Int NOT NULL")]
		public int FundraisingDonationIncremental
		{
			get
			{
				return this._FundraisingDonationIncremental;
			}
			set
			{
				if ((this._FundraisingDonationIncremental != value))
				{
					this.OnFundraisingDonationIncrementalChanging(value);
					this.SendPropertyChanging();
					this._FundraisingDonationIncremental = value;
					this.SendPropertyChanged("FundraisingDonationIncremental");
					this.OnFundraisingDonationIncrementalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingStart", DbType="Date")]
		public System.Nullable<System.DateTime> FundingStart
		{
			get
			{
				return this._FundingStart;
			}
			set
			{
				if ((this._FundingStart != value))
				{
					this.OnFundingStartChanging(value);
					this.SendPropertyChanging();
					this._FundingStart = value;
					this.SendPropertyChanged("FundingStart");
					this.OnFundingStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingEnd", DbType="Date")]
		public System.Nullable<System.DateTime> FundingEnd
		{
			get
			{
				return this._FundingEnd;
			}
			set
			{
				if ((this._FundingEnd != value))
				{
					this.OnFundingEndChanging(value);
					this.SendPropertyChanging();
					this._FundingEnd = value;
					this.SendPropertyChanged("FundingEnd");
					this.OnFundingEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_FundingDetail", Storage="_Contact", ThisKey="FundingContractDetail", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.FundingDetails.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.FundingDetails.Add(this);
						this._FundingContractDetail = value.ContactID;
					}
					else
					{
						this._FundingContractDetail = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_FundingDetail", Storage="_Service", ThisKey="SerID", OtherKey="SerID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.FundingDetail = null;
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.FundingDetail = this;
						this._SerID = value.SerID;
					}
					else
					{
						this._SerID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _Address1;
		
		private string _PostCode;
		
		private System.Nullable<int> _TownID;
		
		private System.Nullable<int> _CountyID;
		
		private System.Nullable<int> _CountryID;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<County> _County;
		
		private EntityRef<Town> _Town;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    partial void OnTownIDChanging(System.Nullable<int> value);
    partial void OnTownIDChanged();
    partial void OnCountyIDChanging(System.Nullable<int> value);
    partial void OnCountyIDChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    #endregion
		
		public Address()
		{
			this._Country = default(EntityRef<Country>);
			this._County = default(EntityRef<County>);
			this._Town = default(EntityRef<Town>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Address", Storage="_Address1", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TownID", DbType="Int")]
		public System.Nullable<int> TownID
		{
			get
			{
				return this._TownID;
			}
			set
			{
				if ((this._TownID != value))
				{
					if (this._Town.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTownIDChanging(value);
					this.SendPropertyChanging();
					this._TownID = value;
					this.SendPropertyChanged("TownID");
					this.OnTownIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyID", DbType="Int")]
		public System.Nullable<int> CountyID
		{
			get
			{
				return this._CountyID;
			}
			set
			{
				if ((this._CountyID != value))
				{
					if (this._County.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIDChanging(value);
					this.SendPropertyChanging();
					this._CountyID = value;
					this.SendPropertyChanged("CountyID");
					this.OnCountyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Address", Storage="_County", ThisKey="CountyID", OtherKey="CountyID", IsForeignKey=true)]
		public County County
		{
			get
			{
				return this._County.Entity;
			}
			set
			{
				County previousValue = this._County.Entity;
				if (((previousValue != value) 
							|| (this._County.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._County.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._County.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CountyID = value.CountyID;
					}
					else
					{
						this._CountyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("County");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_Address", Storage="_Town", ThisKey="TownID", OtherKey="TownID", IsForeignKey=true)]
		public Town Town
		{
			get
			{
				return this._Town.Entity;
			}
			set
			{
				Town previousValue = this._Town.Entity;
				if (((previousValue != value) 
							|| (this._Town.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Town.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Town.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._TownID = value.TownID;
					}
					else
					{
						this._TownID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Town");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GovOfficeRegion")]
	public partial class GovOfficeRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GovOfficeRegionID;
		
		private string _GovOfficeRegionName;
		
		private string _GovOfficeRegionDescription;
		
		private System.Nullable<int> _CountyID;
		
		private int _CountryID;
		
		private int _GovIsActivate;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<County> _County;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGovOfficeRegionIDChanging(int value);
    partial void OnGovOfficeRegionIDChanged();
    partial void OnGovOfficeRegionNameChanging(string value);
    partial void OnGovOfficeRegionNameChanged();
    partial void OnGovOfficeRegionDescriptionChanging(string value);
    partial void OnGovOfficeRegionDescriptionChanged();
    partial void OnCountyIDChanging(System.Nullable<int> value);
    partial void OnCountyIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnGovIsActivateChanging(int value);
    partial void OnGovIsActivateChanged();
    #endregion
		
		public GovOfficeRegion()
		{
			this._Country = default(EntityRef<Country>);
			this._County = default(EntityRef<County>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GovOfficeRegionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GovOfficeRegionID
		{
			get
			{
				return this._GovOfficeRegionID;
			}
			set
			{
				if ((this._GovOfficeRegionID != value))
				{
					this.OnGovOfficeRegionIDChanging(value);
					this.SendPropertyChanging();
					this._GovOfficeRegionID = value;
					this.SendPropertyChanged("GovOfficeRegionID");
					this.OnGovOfficeRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GovOfficeRegionName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string GovOfficeRegionName
		{
			get
			{
				return this._GovOfficeRegionName;
			}
			set
			{
				if ((this._GovOfficeRegionName != value))
				{
					this.OnGovOfficeRegionNameChanging(value);
					this.SendPropertyChanging();
					this._GovOfficeRegionName = value;
					this.SendPropertyChanged("GovOfficeRegionName");
					this.OnGovOfficeRegionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GovOfficeRegionDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string GovOfficeRegionDescription
		{
			get
			{
				return this._GovOfficeRegionDescription;
			}
			set
			{
				if ((this._GovOfficeRegionDescription != value))
				{
					this.OnGovOfficeRegionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GovOfficeRegionDescription = value;
					this.SendPropertyChanged("GovOfficeRegionDescription");
					this.OnGovOfficeRegionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyID", DbType="Int")]
		public System.Nullable<int> CountyID
		{
			get
			{
				return this._CountyID;
			}
			set
			{
				if ((this._CountyID != value))
				{
					if (this._County.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIDChanging(value);
					this.SendPropertyChanging();
					this._CountyID = value;
					this.SendPropertyChanged("CountyID");
					this.OnCountyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GovIsActivate", DbType="Int NOT NULL")]
		public int GovIsActivate
		{
			get
			{
				return this._GovIsActivate;
			}
			set
			{
				if ((this._GovIsActivate != value))
				{
					this.OnGovIsActivateChanging(value);
					this.SendPropertyChanging();
					this._GovIsActivate = value;
					this.SendPropertyChanged("GovIsActivate");
					this.OnGovIsActivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_GovOfficeRegion", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.GovOfficeRegions.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.GovOfficeRegions.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_GovOfficeRegion", Storage="_County", ThisKey="CountyID", OtherKey="CountyID", IsForeignKey=true)]
		public County County
		{
			get
			{
				return this._County.Entity;
			}
			set
			{
				County previousValue = this._County.Entity;
				if (((previousValue != value) 
							|| (this._County.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._County.Entity = null;
						previousValue.GovOfficeRegions.Remove(this);
					}
					this._County.Entity = value;
					if ((value != null))
					{
						value.GovOfficeRegions.Add(this);
						this._CountyID = value.CountyID;
					}
					else
					{
						this._CountyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("County");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PremiseDetail")]
	public partial class PremiseDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PremiseID;
		
		private string _RefListID;
		
		private string _PremiseJSPListID;
		
		private int _MediaContactCheck;
		
		private System.Nullable<int> _MediaContact;
		
		private string _MediaContactName;
		
		private int _CateringFacilities;
		
		private System.Nullable<int> _CateringContact;
		
		private System.Nullable<int> _CateringType;
		
		private int _ClientITFacilities;
		
		private string _ClientITFacilitiesDetail;
		
		private int _RoomAvailability;
		
		private int _VolunteeringOpportunuties;
		
		private string _LocalDemographicNote;
		
		private string _PremiseOutreachLocationListID;
		
		private string _PremiseLocalHotelListID;
		
		private string _TravelDetail;
		
		private string _TravelNearestBus;
		
		private string _TravelNearestRail;
		
		private string _TravelNearestAirport;
		
		private int _VisitorParkingOnsite;
		
		private System.Nullable<int> _VisitorParkingSpace;
		
		private string _VisitorParkingAlternative;
		
		private int _HostVisits;
		
		private System.Nullable<int> _HostingContact;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Contact> _Contact1;
		
		private EntityRef<Contact> _Contact2;
		
		private EntityRef<Premise> _Premise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPremiseIDChanging(int value);
    partial void OnPremiseIDChanged();
    partial void OnRefListIDChanging(string value);
    partial void OnRefListIDChanged();
    partial void OnPremiseJSPListIDChanging(string value);
    partial void OnPremiseJSPListIDChanged();
    partial void OnMediaContactCheckChanging(int value);
    partial void OnMediaContactCheckChanged();
    partial void OnMediaContactChanging(System.Nullable<int> value);
    partial void OnMediaContactChanged();
    partial void OnMediaContactNameChanging(string value);
    partial void OnMediaContactNameChanged();
    partial void OnCateringFacilitiesChanging(int value);
    partial void OnCateringFacilitiesChanged();
    partial void OnCateringContactChanging(System.Nullable<int> value);
    partial void OnCateringContactChanged();
    partial void OnCateringTypeChanging(System.Nullable<int> value);
    partial void OnCateringTypeChanged();
    partial void OnClientITFacilitiesChanging(int value);
    partial void OnClientITFacilitiesChanged();
    partial void OnClientITFacilitiesDetailChanging(string value);
    partial void OnClientITFacilitiesDetailChanged();
    partial void OnRoomAvailabilityChanging(int value);
    partial void OnRoomAvailabilityChanged();
    partial void OnVolunteeringOpportunutiesChanging(int value);
    partial void OnVolunteeringOpportunutiesChanged();
    partial void OnLocalDemographicNoteChanging(string value);
    partial void OnLocalDemographicNoteChanged();
    partial void OnPremiseOutreachLocationListIDChanging(string value);
    partial void OnPremiseOutreachLocationListIDChanged();
    partial void OnPremiseLocalHotelListIDChanging(string value);
    partial void OnPremiseLocalHotelListIDChanged();
    partial void OnTravelDetailChanging(string value);
    partial void OnTravelDetailChanged();
    partial void OnTravelNearestBusChanging(string value);
    partial void OnTravelNearestBusChanged();
    partial void OnTravelNearestRailChanging(string value);
    partial void OnTravelNearestRailChanged();
    partial void OnTravelNearestAirportChanging(string value);
    partial void OnTravelNearestAirportChanged();
    partial void OnVisitorParkingOnsiteChanging(int value);
    partial void OnVisitorParkingOnsiteChanged();
    partial void OnVisitorParkingSpaceChanging(System.Nullable<int> value);
    partial void OnVisitorParkingSpaceChanged();
    partial void OnVisitorParkingAlternativeChanging(string value);
    partial void OnVisitorParkingAlternativeChanged();
    partial void OnHostVisitsChanging(int value);
    partial void OnHostVisitsChanged();
    partial void OnHostingContactChanging(System.Nullable<int> value);
    partial void OnHostingContactChanged();
    #endregion
		
		public PremiseDetail()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Contact1 = default(EntityRef<Contact>);
			this._Contact2 = default(EntityRef<Contact>);
			this._Premise = default(EntityRef<Premise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PremiseID
		{
			get
			{
				return this._PremiseID;
			}
			set
			{
				if ((this._PremiseID != value))
				{
					if (this._Premise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPremiseIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseID = value;
					this.SendPropertyChanged("PremiseID");
					this.OnPremiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefListID", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string RefListID
		{
			get
			{
				return this._RefListID;
			}
			set
			{
				if ((this._RefListID != value))
				{
					this.OnRefListIDChanging(value);
					this.SendPropertyChanging();
					this._RefListID = value;
					this.SendPropertyChanged("RefListID");
					this.OnRefListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseJSPListID", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string PremiseJSPListID
		{
			get
			{
				return this._PremiseJSPListID;
			}
			set
			{
				if ((this._PremiseJSPListID != value))
				{
					this.OnPremiseJSPListIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseJSPListID = value;
					this.SendPropertyChanged("PremiseJSPListID");
					this.OnPremiseJSPListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaContactCheck", DbType="Int NOT NULL")]
		public int MediaContactCheck
		{
			get
			{
				return this._MediaContactCheck;
			}
			set
			{
				if ((this._MediaContactCheck != value))
				{
					this.OnMediaContactCheckChanging(value);
					this.SendPropertyChanging();
					this._MediaContactCheck = value;
					this.SendPropertyChanged("MediaContactCheck");
					this.OnMediaContactCheckChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaContact", DbType="Int")]
		public System.Nullable<int> MediaContact
		{
			get
			{
				return this._MediaContact;
			}
			set
			{
				if ((this._MediaContact != value))
				{
					if (this._Contact2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaContactChanging(value);
					this.SendPropertyChanging();
					this._MediaContact = value;
					this.SendPropertyChanged("MediaContact");
					this.OnMediaContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaContactName", DbType="VarChar(100)")]
		public string MediaContactName
		{
			get
			{
				return this._MediaContactName;
			}
			set
			{
				if ((this._MediaContactName != value))
				{
					this.OnMediaContactNameChanging(value);
					this.SendPropertyChanging();
					this._MediaContactName = value;
					this.SendPropertyChanged("MediaContactName");
					this.OnMediaContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateringFacilities", DbType="Int NOT NULL")]
		public int CateringFacilities
		{
			get
			{
				return this._CateringFacilities;
			}
			set
			{
				if ((this._CateringFacilities != value))
				{
					this.OnCateringFacilitiesChanging(value);
					this.SendPropertyChanging();
					this._CateringFacilities = value;
					this.SendPropertyChanged("CateringFacilities");
					this.OnCateringFacilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateringContact", DbType="Int")]
		public System.Nullable<int> CateringContact
		{
			get
			{
				return this._CateringContact;
			}
			set
			{
				if ((this._CateringContact != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCateringContactChanging(value);
					this.SendPropertyChanging();
					this._CateringContact = value;
					this.SendPropertyChanged("CateringContact");
					this.OnCateringContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateringType", DbType="Int")]
		public System.Nullable<int> CateringType
		{
			get
			{
				return this._CateringType;
			}
			set
			{
				if ((this._CateringType != value))
				{
					this.OnCateringTypeChanging(value);
					this.SendPropertyChanging();
					this._CateringType = value;
					this.SendPropertyChanged("CateringType");
					this.OnCateringTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientITFacilities", DbType="Int NOT NULL")]
		public int ClientITFacilities
		{
			get
			{
				return this._ClientITFacilities;
			}
			set
			{
				if ((this._ClientITFacilities != value))
				{
					this.OnClientITFacilitiesChanging(value);
					this.SendPropertyChanging();
					this._ClientITFacilities = value;
					this.SendPropertyChanged("ClientITFacilities");
					this.OnClientITFacilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientITFacilitiesDetail", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ClientITFacilitiesDetail
		{
			get
			{
				return this._ClientITFacilitiesDetail;
			}
			set
			{
				if ((this._ClientITFacilitiesDetail != value))
				{
					this.OnClientITFacilitiesDetailChanging(value);
					this.SendPropertyChanging();
					this._ClientITFacilitiesDetail = value;
					this.SendPropertyChanged("ClientITFacilitiesDetail");
					this.OnClientITFacilitiesDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomAvailability", DbType="Int NOT NULL")]
		public int RoomAvailability
		{
			get
			{
				return this._RoomAvailability;
			}
			set
			{
				if ((this._RoomAvailability != value))
				{
					this.OnRoomAvailabilityChanging(value);
					this.SendPropertyChanging();
					this._RoomAvailability = value;
					this.SendPropertyChanged("RoomAvailability");
					this.OnRoomAvailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteeringOpportunuties", DbType="Int NOT NULL")]
		public int VolunteeringOpportunuties
		{
			get
			{
				return this._VolunteeringOpportunuties;
			}
			set
			{
				if ((this._VolunteeringOpportunuties != value))
				{
					this.OnVolunteeringOpportunutiesChanging(value);
					this.SendPropertyChanging();
					this._VolunteeringOpportunuties = value;
					this.SendPropertyChanged("VolunteeringOpportunuties");
					this.OnVolunteeringOpportunutiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalDemographicNote", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string LocalDemographicNote
		{
			get
			{
				return this._LocalDemographicNote;
			}
			set
			{
				if ((this._LocalDemographicNote != value))
				{
					this.OnLocalDemographicNoteChanging(value);
					this.SendPropertyChanging();
					this._LocalDemographicNote = value;
					this.SendPropertyChanged("LocalDemographicNote");
					this.OnLocalDemographicNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseOutreachLocationListID", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string PremiseOutreachLocationListID
		{
			get
			{
				return this._PremiseOutreachLocationListID;
			}
			set
			{
				if ((this._PremiseOutreachLocationListID != value))
				{
					this.OnPremiseOutreachLocationListIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseOutreachLocationListID = value;
					this.SendPropertyChanged("PremiseOutreachLocationListID");
					this.OnPremiseOutreachLocationListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseLocalHotelListID", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string PremiseLocalHotelListID
		{
			get
			{
				return this._PremiseLocalHotelListID;
			}
			set
			{
				if ((this._PremiseLocalHotelListID != value))
				{
					this.OnPremiseLocalHotelListIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseLocalHotelListID = value;
					this.SendPropertyChanged("PremiseLocalHotelListID");
					this.OnPremiseLocalHotelListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelDetail", DbType="VarChar(100)")]
		public string TravelDetail
		{
			get
			{
				return this._TravelDetail;
			}
			set
			{
				if ((this._TravelDetail != value))
				{
					this.OnTravelDetailChanging(value);
					this.SendPropertyChanging();
					this._TravelDetail = value;
					this.SendPropertyChanged("TravelDetail");
					this.OnTravelDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelNearestBus", DbType="VarChar(100)")]
		public string TravelNearestBus
		{
			get
			{
				return this._TravelNearestBus;
			}
			set
			{
				if ((this._TravelNearestBus != value))
				{
					this.OnTravelNearestBusChanging(value);
					this.SendPropertyChanging();
					this._TravelNearestBus = value;
					this.SendPropertyChanged("TravelNearestBus");
					this.OnTravelNearestBusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelNearestRail", DbType="VarChar(100)")]
		public string TravelNearestRail
		{
			get
			{
				return this._TravelNearestRail;
			}
			set
			{
				if ((this._TravelNearestRail != value))
				{
					this.OnTravelNearestRailChanging(value);
					this.SendPropertyChanging();
					this._TravelNearestRail = value;
					this.SendPropertyChanged("TravelNearestRail");
					this.OnTravelNearestRailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelNearestAirport", DbType="VarChar(100)")]
		public string TravelNearestAirport
		{
			get
			{
				return this._TravelNearestAirport;
			}
			set
			{
				if ((this._TravelNearestAirport != value))
				{
					this.OnTravelNearestAirportChanging(value);
					this.SendPropertyChanging();
					this._TravelNearestAirport = value;
					this.SendPropertyChanged("TravelNearestAirport");
					this.OnTravelNearestAirportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitorParkingOnsite", DbType="Int NOT NULL")]
		public int VisitorParkingOnsite
		{
			get
			{
				return this._VisitorParkingOnsite;
			}
			set
			{
				if ((this._VisitorParkingOnsite != value))
				{
					this.OnVisitorParkingOnsiteChanging(value);
					this.SendPropertyChanging();
					this._VisitorParkingOnsite = value;
					this.SendPropertyChanged("VisitorParkingOnsite");
					this.OnVisitorParkingOnsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitorParkingSpace", DbType="Int")]
		public System.Nullable<int> VisitorParkingSpace
		{
			get
			{
				return this._VisitorParkingSpace;
			}
			set
			{
				if ((this._VisitorParkingSpace != value))
				{
					this.OnVisitorParkingSpaceChanging(value);
					this.SendPropertyChanging();
					this._VisitorParkingSpace = value;
					this.SendPropertyChanged("VisitorParkingSpace");
					this.OnVisitorParkingSpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitorParkingAlternative", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string VisitorParkingAlternative
		{
			get
			{
				return this._VisitorParkingAlternative;
			}
			set
			{
				if ((this._VisitorParkingAlternative != value))
				{
					this.OnVisitorParkingAlternativeChanging(value);
					this.SendPropertyChanging();
					this._VisitorParkingAlternative = value;
					this.SendPropertyChanged("VisitorParkingAlternative");
					this.OnVisitorParkingAlternativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostVisits", DbType="Int NOT NULL")]
		public int HostVisits
		{
			get
			{
				return this._HostVisits;
			}
			set
			{
				if ((this._HostVisits != value))
				{
					this.OnHostVisitsChanging(value);
					this.SendPropertyChanging();
					this._HostVisits = value;
					this.SendPropertyChanged("HostVisits");
					this.OnHostVisitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostingContact", DbType="Int")]
		public System.Nullable<int> HostingContact
		{
			get
			{
				return this._HostingContact;
			}
			set
			{
				if ((this._HostingContact != value))
				{
					if (this._Contact1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHostingContactChanging(value);
					this.SendPropertyChanging();
					this._HostingContact = value;
					this.SendPropertyChanged("HostingContact");
					this.OnHostingContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PremiseDetail", Storage="_Contact", ThisKey="CateringContact", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.PremiseDetails.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.PremiseDetails.Add(this);
						this._CateringContact = value.ContactID;
					}
					else
					{
						this._CateringContact = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PremiseDetail1", Storage="_Contact1", ThisKey="HostingContact", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact1
		{
			get
			{
				return this._Contact1.Entity;
			}
			set
			{
				Contact previousValue = this._Contact1.Entity;
				if (((previousValue != value) 
							|| (this._Contact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact1.Entity = null;
						previousValue.PremiseDetails1.Remove(this);
					}
					this._Contact1.Entity = value;
					if ((value != null))
					{
						value.PremiseDetails1.Add(this);
						this._HostingContact = value.ContactID;
					}
					else
					{
						this._HostingContact = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PremiseDetail2", Storage="_Contact2", ThisKey="MediaContact", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact2
		{
			get
			{
				return this._Contact2.Entity;
			}
			set
			{
				Contact previousValue = this._Contact2.Entity;
				if (((previousValue != value) 
							|| (this._Contact2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact2.Entity = null;
						previousValue.PremiseDetails2.Remove(this);
					}
					this._Contact2.Entity = value;
					if ((value != null))
					{
						value.PremiseDetails2.Add(this);
						this._MediaContact = value.ContactID;
					}
					else
					{
						this._MediaContact = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_PremiseDetail", Storage="_Premise", ThisKey="PremiseID", OtherKey="PremiseID", IsForeignKey=true)]
		public Premise Premise
		{
			get
			{
				return this._Premise.Entity;
			}
			set
			{
				Premise previousValue = this._Premise.Entity;
				if (((previousValue != value) 
							|| (this._Premise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Premise.Entity = null;
						previousValue.PremiseDetail = null;
					}
					this._Premise.Entity = value;
					if ((value != null))
					{
						value.PremiseDetail = this;
						this._PremiseID = value.PremiseID;
					}
					else
					{
						this._PremiseID = default(int);
					}
					this.SendPropertyChanged("Premise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermiseDetailForCost")]
	public partial class PermiseDetailForCost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermiseID;
		
		private string _RoomOnlyRate;
		
		private string _NegotiatedRoomonlyRate;
		
		private string _BBRate;
		
		private string _BBNegotiatedRate;
		
		private string _DBBRate;
		
		private string _DBBNegotiatedRate;
		
		private string _DDRate;
		
		private string _DDNegotiatedRate;
		
		private string _pre24hrRate;
		
		private string _pre24hrNeotiatedRate;
		
		private string _TeaAndCoffee;
		
		private int _Lunch;
		
		private System.Nullable<System.DateTime> _LastNegotiatedDate;
		
		private System.Nullable<System.DateTime> _RenegotiateOn;
		
		private System.Nullable<decimal> _NoOfMeetingRooms;
		
		private System.Nullable<int> _PreferredStatus;
		
		private string _MeetingRoomRatePerDay;
		
		private System.Nullable<int> _Codings;
		
		private string _Comments;
		
		private EntityRef<Premise> _Premise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermiseIDChanging(int value);
    partial void OnPermiseIDChanged();
    partial void OnRoomOnlyRateChanging(string value);
    partial void OnRoomOnlyRateChanged();
    partial void OnNegotiatedRoomonlyRateChanging(string value);
    partial void OnNegotiatedRoomonlyRateChanged();
    partial void OnBBRateChanging(string value);
    partial void OnBBRateChanged();
    partial void OnBBNegotiatedRateChanging(string value);
    partial void OnBBNegotiatedRateChanged();
    partial void OnDBBRateChanging(string value);
    partial void OnDBBRateChanged();
    partial void OnDBBNegotiatedRateChanging(string value);
    partial void OnDBBNegotiatedRateChanged();
    partial void OnDDRateChanging(string value);
    partial void OnDDRateChanged();
    partial void OnDDNegotiatedRateChanging(string value);
    partial void OnDDNegotiatedRateChanged();
    partial void Onpre24hrRateChanging(string value);
    partial void Onpre24hrRateChanged();
    partial void Onpre24hrNeotiatedRateChanging(string value);
    partial void Onpre24hrNeotiatedRateChanged();
    partial void OnTeaAndCoffeeChanging(string value);
    partial void OnTeaAndCoffeeChanged();
    partial void OnLunchChanging(int value);
    partial void OnLunchChanged();
    partial void OnLastNegotiatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastNegotiatedDateChanged();
    partial void OnRenegotiateOnChanging(System.Nullable<System.DateTime> value);
    partial void OnRenegotiateOnChanged();
    partial void OnNoOfMeetingRoomsChanging(System.Nullable<decimal> value);
    partial void OnNoOfMeetingRoomsChanged();
    partial void OnPreferredStatusChanging(System.Nullable<int> value);
    partial void OnPreferredStatusChanged();
    partial void OnMeetingRoomRatePerDayChanging(string value);
    partial void OnMeetingRoomRatePerDayChanged();
    partial void OnCodingsChanging(System.Nullable<int> value);
    partial void OnCodingsChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public PermiseDetailForCost()
		{
			this._Premise = default(EntityRef<Premise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermiseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermiseID
		{
			get
			{
				return this._PermiseID;
			}
			set
			{
				if ((this._PermiseID != value))
				{
					if (this._Premise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermiseIDChanging(value);
					this.SendPropertyChanging();
					this._PermiseID = value;
					this.SendPropertyChanged("PermiseID");
					this.OnPermiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomOnlyRate", DbType="VarChar(10)")]
		public string RoomOnlyRate
		{
			get
			{
				return this._RoomOnlyRate;
			}
			set
			{
				if ((this._RoomOnlyRate != value))
				{
					this.OnRoomOnlyRateChanging(value);
					this.SendPropertyChanging();
					this._RoomOnlyRate = value;
					this.SendPropertyChanged("RoomOnlyRate");
					this.OnRoomOnlyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NegotiatedRoomonlyRate", DbType="VarChar(10)")]
		public string NegotiatedRoomonlyRate
		{
			get
			{
				return this._NegotiatedRoomonlyRate;
			}
			set
			{
				if ((this._NegotiatedRoomonlyRate != value))
				{
					this.OnNegotiatedRoomonlyRateChanging(value);
					this.SendPropertyChanging();
					this._NegotiatedRoomonlyRate = value;
					this.SendPropertyChanged("NegotiatedRoomonlyRate");
					this.OnNegotiatedRoomonlyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BBRate", DbType="VarChar(10)")]
		public string BBRate
		{
			get
			{
				return this._BBRate;
			}
			set
			{
				if ((this._BBRate != value))
				{
					this.OnBBRateChanging(value);
					this.SendPropertyChanging();
					this._BBRate = value;
					this.SendPropertyChanged("BBRate");
					this.OnBBRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BBNegotiatedRate", DbType="VarChar(10)")]
		public string BBNegotiatedRate
		{
			get
			{
				return this._BBNegotiatedRate;
			}
			set
			{
				if ((this._BBNegotiatedRate != value))
				{
					this.OnBBNegotiatedRateChanging(value);
					this.SendPropertyChanging();
					this._BBNegotiatedRate = value;
					this.SendPropertyChanged("BBNegotiatedRate");
					this.OnBBNegotiatedRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DBBRate", DbType="VarChar(10)")]
		public string DBBRate
		{
			get
			{
				return this._DBBRate;
			}
			set
			{
				if ((this._DBBRate != value))
				{
					this.OnDBBRateChanging(value);
					this.SendPropertyChanging();
					this._DBBRate = value;
					this.SendPropertyChanged("DBBRate");
					this.OnDBBRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DBBNegotiatedRate", DbType="VarChar(10)")]
		public string DBBNegotiatedRate
		{
			get
			{
				return this._DBBNegotiatedRate;
			}
			set
			{
				if ((this._DBBNegotiatedRate != value))
				{
					this.OnDBBNegotiatedRateChanging(value);
					this.SendPropertyChanging();
					this._DBBNegotiatedRate = value;
					this.SendPropertyChanged("DBBNegotiatedRate");
					this.OnDBBNegotiatedRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDRate", DbType="VarChar(10)")]
		public string DDRate
		{
			get
			{
				return this._DDRate;
			}
			set
			{
				if ((this._DDRate != value))
				{
					this.OnDDRateChanging(value);
					this.SendPropertyChanging();
					this._DDRate = value;
					this.SendPropertyChanged("DDRate");
					this.OnDDRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDNegotiatedRate", DbType="VarChar(10)")]
		public string DDNegotiatedRate
		{
			get
			{
				return this._DDNegotiatedRate;
			}
			set
			{
				if ((this._DDNegotiatedRate != value))
				{
					this.OnDDNegotiatedRateChanging(value);
					this.SendPropertyChanging();
					this._DDNegotiatedRate = value;
					this.SendPropertyChanged("DDNegotiatedRate");
					this.OnDDNegotiatedRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pre24hrRate", DbType="VarChar(10)")]
		public string pre24hrRate
		{
			get
			{
				return this._pre24hrRate;
			}
			set
			{
				if ((this._pre24hrRate != value))
				{
					this.Onpre24hrRateChanging(value);
					this.SendPropertyChanging();
					this._pre24hrRate = value;
					this.SendPropertyChanged("pre24hrRate");
					this.Onpre24hrRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pre24hrNeotiatedRate", DbType="VarChar(10)")]
		public string pre24hrNeotiatedRate
		{
			get
			{
				return this._pre24hrNeotiatedRate;
			}
			set
			{
				if ((this._pre24hrNeotiatedRate != value))
				{
					this.Onpre24hrNeotiatedRateChanging(value);
					this.SendPropertyChanging();
					this._pre24hrNeotiatedRate = value;
					this.SendPropertyChanged("pre24hrNeotiatedRate");
					this.Onpre24hrNeotiatedRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeaAndCoffee", DbType="VarChar(10)")]
		public string TeaAndCoffee
		{
			get
			{
				return this._TeaAndCoffee;
			}
			set
			{
				if ((this._TeaAndCoffee != value))
				{
					this.OnTeaAndCoffeeChanging(value);
					this.SendPropertyChanging();
					this._TeaAndCoffee = value;
					this.SendPropertyChanged("TeaAndCoffee");
					this.OnTeaAndCoffeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lunch", DbType="Int NOT NULL")]
		public int Lunch
		{
			get
			{
				return this._Lunch;
			}
			set
			{
				if ((this._Lunch != value))
				{
					this.OnLunchChanging(value);
					this.SendPropertyChanging();
					this._Lunch = value;
					this.SendPropertyChanged("Lunch");
					this.OnLunchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastNegotiatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> LastNegotiatedDate
		{
			get
			{
				return this._LastNegotiatedDate;
			}
			set
			{
				if ((this._LastNegotiatedDate != value))
				{
					this.OnLastNegotiatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastNegotiatedDate = value;
					this.SendPropertyChanged("LastNegotiatedDate");
					this.OnLastNegotiatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RenegotiateOn", DbType="Date")]
		public System.Nullable<System.DateTime> RenegotiateOn
		{
			get
			{
				return this._RenegotiateOn;
			}
			set
			{
				if ((this._RenegotiateOn != value))
				{
					this.OnRenegotiateOnChanging(value);
					this.SendPropertyChanging();
					this._RenegotiateOn = value;
					this.SendPropertyChanged("RenegotiateOn");
					this.OnRenegotiateOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfMeetingRooms", DbType="Decimal(5,0)")]
		public System.Nullable<decimal> NoOfMeetingRooms
		{
			get
			{
				return this._NoOfMeetingRooms;
			}
			set
			{
				if ((this._NoOfMeetingRooms != value))
				{
					this.OnNoOfMeetingRoomsChanging(value);
					this.SendPropertyChanging();
					this._NoOfMeetingRooms = value;
					this.SendPropertyChanged("NoOfMeetingRooms");
					this.OnNoOfMeetingRoomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferredStatus", DbType="Int")]
		public System.Nullable<int> PreferredStatus
		{
			get
			{
				return this._PreferredStatus;
			}
			set
			{
				if ((this._PreferredStatus != value))
				{
					this.OnPreferredStatusChanging(value);
					this.SendPropertyChanging();
					this._PreferredStatus = value;
					this.SendPropertyChanged("PreferredStatus");
					this.OnPreferredStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingRoomRatePerDay", DbType="VarChar(10)")]
		public string MeetingRoomRatePerDay
		{
			get
			{
				return this._MeetingRoomRatePerDay;
			}
			set
			{
				if ((this._MeetingRoomRatePerDay != value))
				{
					this.OnMeetingRoomRatePerDayChanging(value);
					this.SendPropertyChanging();
					this._MeetingRoomRatePerDay = value;
					this.SendPropertyChanged("MeetingRoomRatePerDay");
					this.OnMeetingRoomRatePerDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codings", DbType="Int")]
		public System.Nullable<int> Codings
		{
			get
			{
				return this._Codings;
			}
			set
			{
				if ((this._Codings != value))
				{
					this.OnCodingsChanging(value);
					this.SendPropertyChanging();
					this._Codings = value;
					this.SendPropertyChanged("Codings");
					this.OnCodingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_PermiseDetailForCost", Storage="_Premise", ThisKey="PermiseID", OtherKey="PremiseID", IsForeignKey=true)]
		public Premise Premise
		{
			get
			{
				return this._Premise.Entity;
			}
			set
			{
				Premise previousValue = this._Premise.Entity;
				if (((previousValue != value) 
							|| (this._Premise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Premise.Entity = null;
						previousValue.PermiseDetailForCost = null;
					}
					this._Premise.Entity = value;
					if ((value != null))
					{
						value.PermiseDetailForCost = this;
						this._PermiseID = value.PremiseID;
					}
					else
					{
						this._PermiseID = default(int);
					}
					this.SendPropertyChanged("Premise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GovCounty")]
	public partial class GovCounty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GovCountyID;
		
		private System.Nullable<int> _GovOfficeRegionID;
		
		private System.Nullable<int> _CountyID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGovCountyIDChanging(int value);
    partial void OnGovCountyIDChanged();
    partial void OnGovOfficeRegionIDChanging(System.Nullable<int> value);
    partial void OnGovOfficeRegionIDChanged();
    partial void OnCountyIDChanging(System.Nullable<int> value);
    partial void OnCountyIDChanged();
    #endregion
		
		public GovCounty()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GovCountyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GovCountyID
		{
			get
			{
				return this._GovCountyID;
			}
			set
			{
				if ((this._GovCountyID != value))
				{
					this.OnGovCountyIDChanging(value);
					this.SendPropertyChanging();
					this._GovCountyID = value;
					this.SendPropertyChanged("GovCountyID");
					this.OnGovCountyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GovOfficeRegionID", DbType="Int")]
		public System.Nullable<int> GovOfficeRegionID
		{
			get
			{
				return this._GovOfficeRegionID;
			}
			set
			{
				if ((this._GovOfficeRegionID != value))
				{
					this.OnGovOfficeRegionIDChanging(value);
					this.SendPropertyChanging();
					this._GovOfficeRegionID = value;
					this.SendPropertyChanged("GovOfficeRegionID");
					this.OnGovOfficeRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyID", DbType="Int")]
		public System.Nullable<int> CountyID
		{
			get
			{
				return this._CountyID;
			}
			set
			{
				if ((this._CountyID != value))
				{
					this.OnCountyIDChanging(value);
					this.SendPropertyChanging();
					this._CountyID = value;
					this.SendPropertyChanged("CountyID");
					this.OnCountyIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Facility")]
	public partial class Facility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FacilityID;
		
		private int _PremiseID;
		
		private string _FacilityDescription;
		
		private string _FacilityType;
		
		private System.Nullable<decimal> _RoomCapacity;
		
		private System.Nullable<decimal> _RoomSize;
		
		private System.Nullable<int> _RoomConnectivity;
		
		private string _ConnectivityType;
		
		private string _WirelessAccessInfor;
		
		private System.Nullable<int> _LeadContact;
		
		private System.Nullable<int> _RoomHost;
		
		private System.Nullable<int> _EquipmentAvailable;
		
		private string _EquipmentName;
		
		private string _RoomEquipmentNotes;
		
		private int _FacilityIsActive;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Contact> _Contact1;
		
		private EntityRef<Premise> _Premise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacilityIDChanging(int value);
    partial void OnFacilityIDChanged();
    partial void OnPremiseIDChanging(int value);
    partial void OnPremiseIDChanged();
    partial void OnFacilityDescriptionChanging(string value);
    partial void OnFacilityDescriptionChanged();
    partial void OnFacilityTypeChanging(string value);
    partial void OnFacilityTypeChanged();
    partial void OnRoomCapacityChanging(System.Nullable<decimal> value);
    partial void OnRoomCapacityChanged();
    partial void OnRoomSizeChanging(System.Nullable<decimal> value);
    partial void OnRoomSizeChanged();
    partial void OnRoomConnectivityChanging(System.Nullable<int> value);
    partial void OnRoomConnectivityChanged();
    partial void OnConnectivityTypeChanging(string value);
    partial void OnConnectivityTypeChanged();
    partial void OnWirelessAccessInforChanging(string value);
    partial void OnWirelessAccessInforChanged();
    partial void OnLeadContactChanging(System.Nullable<int> value);
    partial void OnLeadContactChanged();
    partial void OnRoomHostChanging(System.Nullable<int> value);
    partial void OnRoomHostChanged();
    partial void OnEquipmentAvailableChanging(System.Nullable<int> value);
    partial void OnEquipmentAvailableChanged();
    partial void OnEquipmentNameChanging(string value);
    partial void OnEquipmentNameChanged();
    partial void OnRoomEquipmentNotesChanging(string value);
    partial void OnRoomEquipmentNotesChanged();
    partial void OnFacilityIsActiveChanging(int value);
    partial void OnFacilityIsActiveChanged();
    #endregion
		
		public Facility()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Contact1 = default(EntityRef<Contact>);
			this._Premise = default(EntityRef<Premise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FacilityID
		{
			get
			{
				return this._FacilityID;
			}
			set
			{
				if ((this._FacilityID != value))
				{
					this.OnFacilityIDChanging(value);
					this.SendPropertyChanging();
					this._FacilityID = value;
					this.SendPropertyChanged("FacilityID");
					this.OnFacilityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseID", DbType="Int NOT NULL")]
		public int PremiseID
		{
			get
			{
				return this._PremiseID;
			}
			set
			{
				if ((this._PremiseID != value))
				{
					if (this._Premise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPremiseIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseID = value;
					this.SendPropertyChanged("PremiseID");
					this.OnPremiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityDescription", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FacilityDescription
		{
			get
			{
				return this._FacilityDescription;
			}
			set
			{
				if ((this._FacilityDescription != value))
				{
					this.OnFacilityDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FacilityDescription = value;
					this.SendPropertyChanged("FacilityDescription");
					this.OnFacilityDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FacilityType
		{
			get
			{
				return this._FacilityType;
			}
			set
			{
				if ((this._FacilityType != value))
				{
					this.OnFacilityTypeChanging(value);
					this.SendPropertyChanging();
					this._FacilityType = value;
					this.SendPropertyChanged("FacilityType");
					this.OnFacilityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomCapacity", DbType="Decimal(4,0)")]
		public System.Nullable<decimal> RoomCapacity
		{
			get
			{
				return this._RoomCapacity;
			}
			set
			{
				if ((this._RoomCapacity != value))
				{
					this.OnRoomCapacityChanging(value);
					this.SendPropertyChanging();
					this._RoomCapacity = value;
					this.SendPropertyChanged("RoomCapacity");
					this.OnRoomCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomSize", DbType="Decimal(4,0)")]
		public System.Nullable<decimal> RoomSize
		{
			get
			{
				return this._RoomSize;
			}
			set
			{
				if ((this._RoomSize != value))
				{
					this.OnRoomSizeChanging(value);
					this.SendPropertyChanging();
					this._RoomSize = value;
					this.SendPropertyChanged("RoomSize");
					this.OnRoomSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomConnectivity", DbType="Int")]
		public System.Nullable<int> RoomConnectivity
		{
			get
			{
				return this._RoomConnectivity;
			}
			set
			{
				if ((this._RoomConnectivity != value))
				{
					this.OnRoomConnectivityChanging(value);
					this.SendPropertyChanging();
					this._RoomConnectivity = value;
					this.SendPropertyChanged("RoomConnectivity");
					this.OnRoomConnectivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConnectivityType", DbType="VarChar(20)")]
		public string ConnectivityType
		{
			get
			{
				return this._ConnectivityType;
			}
			set
			{
				if ((this._ConnectivityType != value))
				{
					this.OnConnectivityTypeChanging(value);
					this.SendPropertyChanging();
					this._ConnectivityType = value;
					this.SendPropertyChanged("ConnectivityType");
					this.OnConnectivityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WirelessAccessInfor", DbType="VarChar(100)")]
		public string WirelessAccessInfor
		{
			get
			{
				return this._WirelessAccessInfor;
			}
			set
			{
				if ((this._WirelessAccessInfor != value))
				{
					this.OnWirelessAccessInforChanging(value);
					this.SendPropertyChanging();
					this._WirelessAccessInfor = value;
					this.SendPropertyChanged("WirelessAccessInfor");
					this.OnWirelessAccessInforChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadContact", DbType="Int")]
		public System.Nullable<int> LeadContact
		{
			get
			{
				return this._LeadContact;
			}
			set
			{
				if ((this._LeadContact != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadContactChanging(value);
					this.SendPropertyChanging();
					this._LeadContact = value;
					this.SendPropertyChanged("LeadContact");
					this.OnLeadContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomHost", DbType="Int")]
		public System.Nullable<int> RoomHost
		{
			get
			{
				return this._RoomHost;
			}
			set
			{
				if ((this._RoomHost != value))
				{
					if (this._Contact1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomHostChanging(value);
					this.SendPropertyChanging();
					this._RoomHost = value;
					this.SendPropertyChanged("RoomHost");
					this.OnRoomHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentAvailable", DbType="Int")]
		public System.Nullable<int> EquipmentAvailable
		{
			get
			{
				return this._EquipmentAvailable;
			}
			set
			{
				if ((this._EquipmentAvailable != value))
				{
					this.OnEquipmentAvailableChanging(value);
					this.SendPropertyChanging();
					this._EquipmentAvailable = value;
					this.SendPropertyChanged("EquipmentAvailable");
					this.OnEquipmentAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentName", DbType="VarChar(100)")]
		public string EquipmentName
		{
			get
			{
				return this._EquipmentName;
			}
			set
			{
				if ((this._EquipmentName != value))
				{
					this.OnEquipmentNameChanging(value);
					this.SendPropertyChanging();
					this._EquipmentName = value;
					this.SendPropertyChanged("EquipmentName");
					this.OnEquipmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomEquipmentNotes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string RoomEquipmentNotes
		{
			get
			{
				return this._RoomEquipmentNotes;
			}
			set
			{
				if ((this._RoomEquipmentNotes != value))
				{
					this.OnRoomEquipmentNotesChanging(value);
					this.SendPropertyChanging();
					this._RoomEquipmentNotes = value;
					this.SendPropertyChanged("RoomEquipmentNotes");
					this.OnRoomEquipmentNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityIsActive", DbType="Int NOT NULL")]
		public int FacilityIsActive
		{
			get
			{
				return this._FacilityIsActive;
			}
			set
			{
				if ((this._FacilityIsActive != value))
				{
					this.OnFacilityIsActiveChanging(value);
					this.SendPropertyChanging();
					this._FacilityIsActive = value;
					this.SendPropertyChanged("FacilityIsActive");
					this.OnFacilityIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Facility", Storage="_Contact", ThisKey="LeadContact", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Facilities.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Facilities.Add(this);
						this._LeadContact = value.ContactID;
					}
					else
					{
						this._LeadContact = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Facility1", Storage="_Contact1", ThisKey="RoomHost", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact1
		{
			get
			{
				return this._Contact1.Entity;
			}
			set
			{
				Contact previousValue = this._Contact1.Entity;
				if (((previousValue != value) 
							|| (this._Contact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact1.Entity = null;
						previousValue.Facilities1.Remove(this);
					}
					this._Contact1.Entity = value;
					if ((value != null))
					{
						value.Facilities1.Add(this);
						this._RoomHost = value.ContactID;
					}
					else
					{
						this._RoomHost = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_Facility", Storage="_Premise", ThisKey="PremiseID", OtherKey="PremiseID", IsForeignKey=true)]
		public Premise Premise
		{
			get
			{
				return this._Premise.Entity;
			}
			set
			{
				Premise previousValue = this._Premise.Entity;
				if (((previousValue != value) 
							|| (this._Premise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Premise.Entity = null;
						previousValue.Facilities.Remove(this);
					}
					this._Premise.Entity = value;
					if ((value != null))
					{
						value.Facilities.Add(this);
						this._PremiseID = value.PremiseID;
					}
					else
					{
						this._PremiseID = default(int);
					}
					this.SendPropertyChanged("Premise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Volunteering")]
	public partial class Volunteering : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VolunteeringID;
		
		private int _PremiseID;
		
		private int _VolunteeringContact;
		
		private string _VolunteeringPurpose;
		
		private string _VolunteeringDetail;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<decimal> _VolunteerNos;
		
		private int _VolunteeringIsActive;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Premise> _Premise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVolunteeringIDChanging(int value);
    partial void OnVolunteeringIDChanged();
    partial void OnPremiseIDChanging(int value);
    partial void OnPremiseIDChanged();
    partial void OnVolunteeringContactChanging(int value);
    partial void OnVolunteeringContactChanged();
    partial void OnVolunteeringPurposeChanging(string value);
    partial void OnVolunteeringPurposeChanged();
    partial void OnVolunteeringDetailChanging(string value);
    partial void OnVolunteeringDetailChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnVolunteerNosChanging(System.Nullable<decimal> value);
    partial void OnVolunteerNosChanged();
    partial void OnVolunteeringIsActiveChanging(int value);
    partial void OnVolunteeringIsActiveChanged();
    #endregion
		
		public Volunteering()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Premise = default(EntityRef<Premise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteeringID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VolunteeringID
		{
			get
			{
				return this._VolunteeringID;
			}
			set
			{
				if ((this._VolunteeringID != value))
				{
					this.OnVolunteeringIDChanging(value);
					this.SendPropertyChanging();
					this._VolunteeringID = value;
					this.SendPropertyChanged("VolunteeringID");
					this.OnVolunteeringIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseID", DbType="Int NOT NULL")]
		public int PremiseID
		{
			get
			{
				return this._PremiseID;
			}
			set
			{
				if ((this._PremiseID != value))
				{
					if (this._Premise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPremiseIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseID = value;
					this.SendPropertyChanged("PremiseID");
					this.OnPremiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteeringContact", DbType="Int NOT NULL")]
		public int VolunteeringContact
		{
			get
			{
				return this._VolunteeringContact;
			}
			set
			{
				if ((this._VolunteeringContact != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVolunteeringContactChanging(value);
					this.SendPropertyChanging();
					this._VolunteeringContact = value;
					this.SendPropertyChanged("VolunteeringContact");
					this.OnVolunteeringContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteeringPurpose", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string VolunteeringPurpose
		{
			get
			{
				return this._VolunteeringPurpose;
			}
			set
			{
				if ((this._VolunteeringPurpose != value))
				{
					this.OnVolunteeringPurposeChanging(value);
					this.SendPropertyChanging();
					this._VolunteeringPurpose = value;
					this.SendPropertyChanged("VolunteeringPurpose");
					this.OnVolunteeringPurposeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteeringDetail", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string VolunteeringDetail
		{
			get
			{
				return this._VolunteeringDetail;
			}
			set
			{
				if ((this._VolunteeringDetail != value))
				{
					this.OnVolunteeringDetailChanging(value);
					this.SendPropertyChanging();
					this._VolunteeringDetail = value;
					this.SendPropertyChanged("VolunteeringDetail");
					this.OnVolunteeringDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteerNos", DbType="Decimal(4,0)")]
		public System.Nullable<decimal> VolunteerNos
		{
			get
			{
				return this._VolunteerNos;
			}
			set
			{
				if ((this._VolunteerNos != value))
				{
					this.OnVolunteerNosChanging(value);
					this.SendPropertyChanging();
					this._VolunteerNos = value;
					this.SendPropertyChanged("VolunteerNos");
					this.OnVolunteerNosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteeringIsActive", DbType="Int NOT NULL")]
		public int VolunteeringIsActive
		{
			get
			{
				return this._VolunteeringIsActive;
			}
			set
			{
				if ((this._VolunteeringIsActive != value))
				{
					this.OnVolunteeringIsActiveChanging(value);
					this.SendPropertyChanging();
					this._VolunteeringIsActive = value;
					this.SendPropertyChanged("VolunteeringIsActive");
					this.OnVolunteeringIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Volunteering", Storage="_Contact", ThisKey="VolunteeringContact", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Volunteerings.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Volunteerings.Add(this);
						this._VolunteeringContact = value.ContactID;
					}
					else
					{
						this._VolunteeringContact = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_Volunteering", Storage="_Premise", ThisKey="PremiseID", OtherKey="PremiseID", IsForeignKey=true)]
		public Premise Premise
		{
			get
			{
				return this._Premise.Entity;
			}
			set
			{
				Premise previousValue = this._Premise.Entity;
				if (((previousValue != value) 
							|| (this._Premise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Premise.Entity = null;
						previousValue.Volunteerings.Remove(this);
					}
					this._Premise.Entity = value;
					if ((value != null))
					{
						value.Volunteerings.Add(this);
						this._PremiseID = value.PremiseID;
					}
					else
					{
						this._PremiseID = default(int);
					}
					this.SendPropertyChanged("Premise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectMinorWork")]
	public partial class ProjectMinorWork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PMWID;
		
		private int _PremiseID;
		
		private string _PMWDescription;
		
		private int _ProjectOrMinorWork;
		
		private int _PMWIsTBA;
		
		private System.Nullable<int> _PMWContact;
		
		private System.Nullable<int> _AuthorisedByName;
		
		private string _PMWStatus;
		
		private System.DateTime _PMWEnquiryReceivedDate;
		
		private System.Nullable<System.DateTime> _AuthorisedDate;
		
		private System.Nullable<System.DateTime> _ActualStartDate;
		
		private System.Nullable<System.DateTime> _AnticipatedCompletion;
		
		private System.Nullable<System.DateTime> _ActualCompletionDate;
		
		private string _NotesActions;
		
		private string _EstimatedCost;
		
		private string _ActualCost;
		
		private System.Nullable<int> _Directorate;
		
		private int _PMWIsActive;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Contact> _Contact1;
		
		private EntityRef<Directorate> _Directorate1;
		
		private EntityRef<Premise> _Premise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPMWIDChanging(int value);
    partial void OnPMWIDChanged();
    partial void OnPremiseIDChanging(int value);
    partial void OnPremiseIDChanged();
    partial void OnPMWDescriptionChanging(string value);
    partial void OnPMWDescriptionChanged();
    partial void OnProjectOrMinorWorkChanging(int value);
    partial void OnProjectOrMinorWorkChanged();
    partial void OnPMWIsTBAChanging(int value);
    partial void OnPMWIsTBAChanged();
    partial void OnPMWContactChanging(System.Nullable<int> value);
    partial void OnPMWContactChanged();
    partial void OnAuthorisedByNameChanging(System.Nullable<int> value);
    partial void OnAuthorisedByNameChanged();
    partial void OnPMWStatusChanging(string value);
    partial void OnPMWStatusChanged();
    partial void OnPMWEnquiryReceivedDateChanging(System.DateTime value);
    partial void OnPMWEnquiryReceivedDateChanged();
    partial void OnAuthorisedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAuthorisedDateChanged();
    partial void OnActualStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualStartDateChanged();
    partial void OnAnticipatedCompletionChanging(System.Nullable<System.DateTime> value);
    partial void OnAnticipatedCompletionChanged();
    partial void OnActualCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualCompletionDateChanged();
    partial void OnNotesActionsChanging(string value);
    partial void OnNotesActionsChanged();
    partial void OnEstimatedCostChanging(string value);
    partial void OnEstimatedCostChanged();
    partial void OnActualCostChanging(string value);
    partial void OnActualCostChanged();
    partial void OnDirectorateChanging(System.Nullable<int> value);
    partial void OnDirectorateChanged();
    partial void OnPMWIsActiveChanging(int value);
    partial void OnPMWIsActiveChanged();
    #endregion
		
		public ProjectMinorWork()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Contact1 = default(EntityRef<Contact>);
			this._Directorate1 = default(EntityRef<Directorate>);
			this._Premise = default(EntityRef<Premise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMWID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PMWID
		{
			get
			{
				return this._PMWID;
			}
			set
			{
				if ((this._PMWID != value))
				{
					this.OnPMWIDChanging(value);
					this.SendPropertyChanging();
					this._PMWID = value;
					this.SendPropertyChanged("PMWID");
					this.OnPMWIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseID", DbType="Int NOT NULL")]
		public int PremiseID
		{
			get
			{
				return this._PremiseID;
			}
			set
			{
				if ((this._PremiseID != value))
				{
					if (this._Premise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPremiseIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseID = value;
					this.SendPropertyChanged("PremiseID");
					this.OnPremiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMWDescription", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PMWDescription
		{
			get
			{
				return this._PMWDescription;
			}
			set
			{
				if ((this._PMWDescription != value))
				{
					this.OnPMWDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PMWDescription = value;
					this.SendPropertyChanged("PMWDescription");
					this.OnPMWDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectOrMinorWork", DbType="Int NOT NULL")]
		public int ProjectOrMinorWork
		{
			get
			{
				return this._ProjectOrMinorWork;
			}
			set
			{
				if ((this._ProjectOrMinorWork != value))
				{
					this.OnProjectOrMinorWorkChanging(value);
					this.SendPropertyChanging();
					this._ProjectOrMinorWork = value;
					this.SendPropertyChanged("ProjectOrMinorWork");
					this.OnProjectOrMinorWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMWIsTBA", DbType="Int NOT NULL")]
		public int PMWIsTBA
		{
			get
			{
				return this._PMWIsTBA;
			}
			set
			{
				if ((this._PMWIsTBA != value))
				{
					this.OnPMWIsTBAChanging(value);
					this.SendPropertyChanging();
					this._PMWIsTBA = value;
					this.SendPropertyChanged("PMWIsTBA");
					this.OnPMWIsTBAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMWContact", DbType="Int")]
		public System.Nullable<int> PMWContact
		{
			get
			{
				return this._PMWContact;
			}
			set
			{
				if ((this._PMWContact != value))
				{
					if (this._Contact1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMWContactChanging(value);
					this.SendPropertyChanging();
					this._PMWContact = value;
					this.SendPropertyChanged("PMWContact");
					this.OnPMWContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorisedByName", DbType="Int")]
		public System.Nullable<int> AuthorisedByName
		{
			get
			{
				return this._AuthorisedByName;
			}
			set
			{
				if ((this._AuthorisedByName != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorisedByNameChanging(value);
					this.SendPropertyChanging();
					this._AuthorisedByName = value;
					this.SendPropertyChanged("AuthorisedByName");
					this.OnAuthorisedByNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMWStatus", DbType="VarChar(20)")]
		public string PMWStatus
		{
			get
			{
				return this._PMWStatus;
			}
			set
			{
				if ((this._PMWStatus != value))
				{
					this.OnPMWStatusChanging(value);
					this.SendPropertyChanging();
					this._PMWStatus = value;
					this.SendPropertyChanged("PMWStatus");
					this.OnPMWStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMWEnquiryReceivedDate", DbType="Date NOT NULL")]
		public System.DateTime PMWEnquiryReceivedDate
		{
			get
			{
				return this._PMWEnquiryReceivedDate;
			}
			set
			{
				if ((this._PMWEnquiryReceivedDate != value))
				{
					this.OnPMWEnquiryReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._PMWEnquiryReceivedDate = value;
					this.SendPropertyChanged("PMWEnquiryReceivedDate");
					this.OnPMWEnquiryReceivedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorisedDate", DbType="Date")]
		public System.Nullable<System.DateTime> AuthorisedDate
		{
			get
			{
				return this._AuthorisedDate;
			}
			set
			{
				if ((this._AuthorisedDate != value))
				{
					this.OnAuthorisedDateChanging(value);
					this.SendPropertyChanging();
					this._AuthorisedDate = value;
					this.SendPropertyChanged("AuthorisedDate");
					this.OnAuthorisedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualStartDate", DbType="Date")]
		public System.Nullable<System.DateTime> ActualStartDate
		{
			get
			{
				return this._ActualStartDate;
			}
			set
			{
				if ((this._ActualStartDate != value))
				{
					this.OnActualStartDateChanging(value);
					this.SendPropertyChanging();
					this._ActualStartDate = value;
					this.SendPropertyChanged("ActualStartDate");
					this.OnActualStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnticipatedCompletion", DbType="Date")]
		public System.Nullable<System.DateTime> AnticipatedCompletion
		{
			get
			{
				return this._AnticipatedCompletion;
			}
			set
			{
				if ((this._AnticipatedCompletion != value))
				{
					this.OnAnticipatedCompletionChanging(value);
					this.SendPropertyChanging();
					this._AnticipatedCompletion = value;
					this.SendPropertyChanged("AnticipatedCompletion");
					this.OnAnticipatedCompletionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCompletionDate", DbType="Date")]
		public System.Nullable<System.DateTime> ActualCompletionDate
		{
			get
			{
				return this._ActualCompletionDate;
			}
			set
			{
				if ((this._ActualCompletionDate != value))
				{
					this.OnActualCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._ActualCompletionDate = value;
					this.SendPropertyChanged("ActualCompletionDate");
					this.OnActualCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotesActions", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string NotesActions
		{
			get
			{
				return this._NotesActions;
			}
			set
			{
				if ((this._NotesActions != value))
				{
					this.OnNotesActionsChanging(value);
					this.SendPropertyChanging();
					this._NotesActions = value;
					this.SendPropertyChanged("NotesActions");
					this.OnNotesActionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedCost", DbType="VarChar(20)")]
		public string EstimatedCost
		{
			get
			{
				return this._EstimatedCost;
			}
			set
			{
				if ((this._EstimatedCost != value))
				{
					this.OnEstimatedCostChanging(value);
					this.SendPropertyChanging();
					this._EstimatedCost = value;
					this.SendPropertyChanged("EstimatedCost");
					this.OnEstimatedCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCost", DbType="VarChar(20)")]
		public string ActualCost
		{
			get
			{
				return this._ActualCost;
			}
			set
			{
				if ((this._ActualCost != value))
				{
					this.OnActualCostChanging(value);
					this.SendPropertyChanging();
					this._ActualCost = value;
					this.SendPropertyChanged("ActualCost");
					this.OnActualCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Directorate", DbType="Int")]
		public System.Nullable<int> Directorate
		{
			get
			{
				return this._Directorate;
			}
			set
			{
				if ((this._Directorate != value))
				{
					if (this._Directorate1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectorateChanging(value);
					this.SendPropertyChanging();
					this._Directorate = value;
					this.SendPropertyChanged("Directorate");
					this.OnDirectorateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMWIsActive", DbType="Int NOT NULL")]
		public int PMWIsActive
		{
			get
			{
				return this._PMWIsActive;
			}
			set
			{
				if ((this._PMWIsActive != value))
				{
					this.OnPMWIsActiveChanging(value);
					this.SendPropertyChanging();
					this._PMWIsActive = value;
					this.SendPropertyChanged("PMWIsActive");
					this.OnPMWIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_ProjectMinorWork", Storage="_Contact", ThisKey="AuthorisedByName", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.ProjectMinorWorks.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.ProjectMinorWorks.Add(this);
						this._AuthorisedByName = value.ContactID;
					}
					else
					{
						this._AuthorisedByName = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_ProjectMinorWork1", Storage="_Contact1", ThisKey="PMWContact", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact1
		{
			get
			{
				return this._Contact1.Entity;
			}
			set
			{
				Contact previousValue = this._Contact1.Entity;
				if (((previousValue != value) 
							|| (this._Contact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact1.Entity = null;
						previousValue.ProjectMinorWorks1.Remove(this);
					}
					this._Contact1.Entity = value;
					if ((value != null))
					{
						value.ProjectMinorWorks1.Add(this);
						this._PMWContact = value.ContactID;
					}
					else
					{
						this._PMWContact = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directorate_ProjectMinorWork", Storage="_Directorate1", ThisKey="Directorate", OtherKey="DirID", IsForeignKey=true)]
		public Directorate Directorate1
		{
			get
			{
				return this._Directorate1.Entity;
			}
			set
			{
				Directorate previousValue = this._Directorate1.Entity;
				if (((previousValue != value) 
							|| (this._Directorate1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directorate1.Entity = null;
						previousValue.ProjectMinorWorks.Remove(this);
					}
					this._Directorate1.Entity = value;
					if ((value != null))
					{
						value.ProjectMinorWorks.Add(this);
						this._Directorate = value.DirID;
					}
					else
					{
						this._Directorate = default(Nullable<int>);
					}
					this.SendPropertyChanged("Directorate1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_ProjectMinorWork", Storage="_Premise", ThisKey="PremiseID", OtherKey="PremiseID", IsForeignKey=true)]
		public Premise Premise
		{
			get
			{
				return this._Premise.Entity;
			}
			set
			{
				Premise previousValue = this._Premise.Entity;
				if (((previousValue != value) 
							|| (this._Premise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Premise.Entity = null;
						previousValue.ProjectMinorWorks.Remove(this);
					}
					this._Premise.Entity = value;
					if ((value != null))
					{
						value.ProjectMinorWorks.Add(this);
						this._PremiseID = value.PremiseID;
					}
					else
					{
						this._PremiseID = default(int);
					}
					this.SendPropertyChanged("Premise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganisationLinkService")]
	public partial class OrganisationLinkService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrgID;
		
		private int _SerID;
		
		private string _Role;
		
		private int _LinkID;
		
		private EntityRef<Organisation> _Organisation;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnSerIDChanging(int value);
    partial void OnSerIDChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    #endregion
		
		public OrganisationLinkService()
		{
			this._Organisation = default(EntityRef<Organisation>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL")]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerID", DbType="Int NOT NULL")]
		public int SerID
		{
			get
			{
				return this._SerID;
			}
			set
			{
				if ((this._SerID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSerIDChanging(value);
					this.SendPropertyChanging();
					this._SerID = value;
					this.SendPropertyChanged("SerID");
					this.OnSerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationLinkService", Storage="_Organisation", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.OrganisationLinkServices.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.OrganisationLinkServices.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_OrganisationLinkService", Storage="_Service", ThisKey="SerID", OtherKey="SerID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.OrganisationLinkServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.OrganisationLinkServices.Add(this);
						this._SerID = value.SerID;
					}
					else
					{
						this._SerID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PremiseLinkService")]
	public partial class PremiseLinkService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PremiseID;
		
		private int _ServiceID;
		
		private string _ProjectCode;
		
		private int _LinkID;
		
		private EntityRef<Premise> _Premise;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPremiseIDChanging(int value);
    partial void OnPremiseIDChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnProjectCodeChanging(string value);
    partial void OnProjectCodeChanged();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    #endregion
		
		public PremiseLinkService()
		{
			this._Premise = default(EntityRef<Premise>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseID", DbType="Int NOT NULL")]
		public int PremiseID
		{
			get
			{
				return this._PremiseID;
			}
			set
			{
				if ((this._PremiseID != value))
				{
					if (this._Premise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPremiseIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseID = value;
					this.SendPropertyChanged("PremiseID");
					this.OnPremiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectCode", DbType="VarChar(20)")]
		public string ProjectCode
		{
			get
			{
				return this._ProjectCode;
			}
			set
			{
				if ((this._ProjectCode != value))
				{
					this.OnProjectCodeChanging(value);
					this.SendPropertyChanging();
					this._ProjectCode = value;
					this.SendPropertyChanged("ProjectCode");
					this.OnProjectCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_PremiseLinkService", Storage="_Premise", ThisKey="PremiseID", OtherKey="PremiseID", IsForeignKey=true)]
		public Premise Premise
		{
			get
			{
				return this._Premise.Entity;
			}
			set
			{
				Premise previousValue = this._Premise.Entity;
				if (((previousValue != value) 
							|| (this._Premise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Premise.Entity = null;
						previousValue.PremiseLinkServices.Remove(this);
					}
					this._Premise.Entity = value;
					if ((value != null))
					{
						value.PremiseLinkServices.Add(this);
						this._PremiseID = value.PremiseID;
					}
					else
					{
						this._PremiseID = default(int);
					}
					this.SendPropertyChanged("Premise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_PremiseLinkService", Storage="_Service", ThisKey="ServiceID", OtherKey="SerID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.PremiseLinkServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.PremiseLinkServices.Add(this);
						this._ServiceID = value.SerID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SICCode")]
	public partial class SICCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SICID;
		
		private string _SICCode1;
		
		private string _TypeOfBusiness;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSICIDChanging(int value);
    partial void OnSICIDChanged();
    partial void OnSICCode1Changing(string value);
    partial void OnSICCode1Changed();
    partial void OnTypeOfBusinessChanging(string value);
    partial void OnTypeOfBusinessChanged();
    #endregion
		
		public SICCode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SICID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SICID
		{
			get
			{
				return this._SICID;
			}
			set
			{
				if ((this._SICID != value))
				{
					this.OnSICIDChanging(value);
					this.SendPropertyChanging();
					this._SICID = value;
					this.SendPropertyChanged("SICID");
					this.OnSICIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SICCode", Storage="_SICCode1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SICCode1
		{
			get
			{
				return this._SICCode1;
			}
			set
			{
				if ((this._SICCode1 != value))
				{
					this.OnSICCode1Changing(value);
					this.SendPropertyChanging();
					this._SICCode1 = value;
					this.SendPropertyChanged("SICCode1");
					this.OnSICCode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfBusiness", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string TypeOfBusiness
		{
			get
			{
				return this._TypeOfBusiness;
			}
			set
			{
				if ((this._TypeOfBusiness != value))
				{
					this.OnTypeOfBusinessChanging(value);
					this.SendPropertyChanging();
					this._TypeOfBusiness = value;
					this.SendPropertyChanged("TypeOfBusiness");
					this.OnTypeOfBusinessChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PremiseOpenSchedule")]
	public partial class PremiseOpenSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PremiseID;
		
		private string _StartMonday;
		
		private string _EndMonday;
		
		private string _StartTuesday;
		
		private string _EndTuesday;
		
		private string _StartWednesday;
		
		private string _EndWednesday;
		
		private string _StartThursday;
		
		private string _EndThursday;
		
		private string _StartFriday;
		
		private string _EndFriday;
		
		private string _StartSaturday;
		
		private string _EndSaturday;
		
		private string _StartSunday;
		
		private string _EndSunday;
		
		private EntityRef<Premise> _Premise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPremiseIDChanging(int value);
    partial void OnPremiseIDChanged();
    partial void OnStartMondayChanging(string value);
    partial void OnStartMondayChanged();
    partial void OnEndMondayChanging(string value);
    partial void OnEndMondayChanged();
    partial void OnStartTuesdayChanging(string value);
    partial void OnStartTuesdayChanged();
    partial void OnEndTuesdayChanging(string value);
    partial void OnEndTuesdayChanged();
    partial void OnStartWednesdayChanging(string value);
    partial void OnStartWednesdayChanged();
    partial void OnEndWednesdayChanging(string value);
    partial void OnEndWednesdayChanged();
    partial void OnStartThursdayChanging(string value);
    partial void OnStartThursdayChanged();
    partial void OnEndThursdayChanging(string value);
    partial void OnEndThursdayChanged();
    partial void OnStartFridayChanging(string value);
    partial void OnStartFridayChanged();
    partial void OnEndFridayChanging(string value);
    partial void OnEndFridayChanged();
    partial void OnStartSaturdayChanging(string value);
    partial void OnStartSaturdayChanged();
    partial void OnEndSaturdayChanging(string value);
    partial void OnEndSaturdayChanged();
    partial void OnStartSundayChanging(string value);
    partial void OnStartSundayChanged();
    partial void OnEndSundayChanging(string value);
    partial void OnEndSundayChanged();
    #endregion
		
		public PremiseOpenSchedule()
		{
			this._Premise = default(EntityRef<Premise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PremiseID
		{
			get
			{
				return this._PremiseID;
			}
			set
			{
				if ((this._PremiseID != value))
				{
					if (this._Premise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPremiseIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseID = value;
					this.SendPropertyChanged("PremiseID");
					this.OnPremiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartMonday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string StartMonday
		{
			get
			{
				return this._StartMonday;
			}
			set
			{
				if ((this._StartMonday != value))
				{
					this.OnStartMondayChanging(value);
					this.SendPropertyChanging();
					this._StartMonday = value;
					this.SendPropertyChanged("StartMonday");
					this.OnStartMondayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndMonday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string EndMonday
		{
			get
			{
				return this._EndMonday;
			}
			set
			{
				if ((this._EndMonday != value))
				{
					this.OnEndMondayChanging(value);
					this.SendPropertyChanging();
					this._EndMonday = value;
					this.SendPropertyChanged("EndMonday");
					this.OnEndMondayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTuesday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string StartTuesday
		{
			get
			{
				return this._StartTuesday;
			}
			set
			{
				if ((this._StartTuesday != value))
				{
					this.OnStartTuesdayChanging(value);
					this.SendPropertyChanging();
					this._StartTuesday = value;
					this.SendPropertyChanged("StartTuesday");
					this.OnStartTuesdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTuesday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string EndTuesday
		{
			get
			{
				return this._EndTuesday;
			}
			set
			{
				if ((this._EndTuesday != value))
				{
					this.OnEndTuesdayChanging(value);
					this.SendPropertyChanging();
					this._EndTuesday = value;
					this.SendPropertyChanged("EndTuesday");
					this.OnEndTuesdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartWednesday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string StartWednesday
		{
			get
			{
				return this._StartWednesday;
			}
			set
			{
				if ((this._StartWednesday != value))
				{
					this.OnStartWednesdayChanging(value);
					this.SendPropertyChanging();
					this._StartWednesday = value;
					this.SendPropertyChanged("StartWednesday");
					this.OnStartWednesdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndWednesday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string EndWednesday
		{
			get
			{
				return this._EndWednesday;
			}
			set
			{
				if ((this._EndWednesday != value))
				{
					this.OnEndWednesdayChanging(value);
					this.SendPropertyChanging();
					this._EndWednesday = value;
					this.SendPropertyChanged("EndWednesday");
					this.OnEndWednesdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartThursday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string StartThursday
		{
			get
			{
				return this._StartThursday;
			}
			set
			{
				if ((this._StartThursday != value))
				{
					this.OnStartThursdayChanging(value);
					this.SendPropertyChanging();
					this._StartThursday = value;
					this.SendPropertyChanged("StartThursday");
					this.OnStartThursdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndThursday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string EndThursday
		{
			get
			{
				return this._EndThursday;
			}
			set
			{
				if ((this._EndThursday != value))
				{
					this.OnEndThursdayChanging(value);
					this.SendPropertyChanging();
					this._EndThursday = value;
					this.SendPropertyChanged("EndThursday");
					this.OnEndThursdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartFriday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string StartFriday
		{
			get
			{
				return this._StartFriday;
			}
			set
			{
				if ((this._StartFriday != value))
				{
					this.OnStartFridayChanging(value);
					this.SendPropertyChanging();
					this._StartFriday = value;
					this.SendPropertyChanged("StartFriday");
					this.OnStartFridayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndFriday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string EndFriday
		{
			get
			{
				return this._EndFriday;
			}
			set
			{
				if ((this._EndFriday != value))
				{
					this.OnEndFridayChanging(value);
					this.SendPropertyChanging();
					this._EndFriday = value;
					this.SendPropertyChanged("EndFriday");
					this.OnEndFridayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartSaturday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string StartSaturday
		{
			get
			{
				return this._StartSaturday;
			}
			set
			{
				if ((this._StartSaturday != value))
				{
					this.OnStartSaturdayChanging(value);
					this.SendPropertyChanging();
					this._StartSaturday = value;
					this.SendPropertyChanged("StartSaturday");
					this.OnStartSaturdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndSaturday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string EndSaturday
		{
			get
			{
				return this._EndSaturday;
			}
			set
			{
				if ((this._EndSaturday != value))
				{
					this.OnEndSaturdayChanging(value);
					this.SendPropertyChanging();
					this._EndSaturday = value;
					this.SendPropertyChanged("EndSaturday");
					this.OnEndSaturdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartSunday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string StartSunday
		{
			get
			{
				return this._StartSunday;
			}
			set
			{
				if ((this._StartSunday != value))
				{
					this.OnStartSundayChanging(value);
					this.SendPropertyChanging();
					this._StartSunday = value;
					this.SendPropertyChanged("StartSunday");
					this.OnStartSundayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndSunday", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string EndSunday
		{
			get
			{
				return this._EndSunday;
			}
			set
			{
				if ((this._EndSunday != value))
				{
					this.OnEndSundayChanging(value);
					this.SendPropertyChanging();
					this._EndSunday = value;
					this.SendPropertyChanged("EndSunday");
					this.OnEndSundayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_PremiseOpenSchedule", Storage="_Premise", ThisKey="PremiseID", OtherKey="PremiseID", IsForeignKey=true)]
		public Premise Premise
		{
			get
			{
				return this._Premise.Entity;
			}
			set
			{
				Premise previousValue = this._Premise.Entity;
				if (((previousValue != value) 
							|| (this._Premise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Premise.Entity = null;
						previousValue.PremiseOpenSchedule = null;
					}
					this._Premise.Entity = value;
					if ((value != null))
					{
						value.PremiseOpenSchedule = this;
						this._PremiseID = value.PremiseID;
					}
					else
					{
						this._PremiseID = default(int);
					}
					this.SendPropertyChanged("Premise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Account;
		
		private string _Email;
		
		private int _Role;
		
		private string _Password;
		
		private EntitySet<SupportingMaterial> _SupportingMaterials;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._SupportingMaterials = new EntitySet<SupportingMaterial>(new Action<SupportingMaterial>(this.attach_SupportingMaterials), new Action<SupportingMaterial>(this.detach_SupportingMaterials));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int NOT NULL")]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SupportingMaterial", Storage="_SupportingMaterials", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<SupportingMaterial> SupportingMaterials
		{
			get
			{
				return this._SupportingMaterials;
			}
			set
			{
				this._SupportingMaterials.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SupportingMaterials(SupportingMaterial entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SupportingMaterials(SupportingMaterial entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organisation")]
	public partial class Organisation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrgID;
		
		private string _OrgName;
		
		private string _OrgShortDescription;
		
		private string _OrgFullDescription;
		
		private System.Nullable<int> _LeadContactID;
		
		private string _TypeOfBusiness;
		
		private int _OrgSICCode;
		
		private string _OrgAddr1;
		
		private string _OrgAddr2;
		
		private string _OrgAddr3;
		
		private string _OrgPostCode;
		
		private string _OrgPhone;
		
		private string _OrgFax;
		
		private string _OrgEmail;
		
		private string _OrgWebAddr;
		
		private string _OrgExprList;
		
		private System.Nullable<decimal> _OrgCharNumb;
		
		private System.Nullable<decimal> _OrgCompNumb;
		
		private System.Nullable<int> _CountryID;
		
		private string _County;
		
		private string _CityTown;
		
		private string _RefListID;
		
		private int _OrgIsPreterred;
		
		private int _OrgIsActive;
		
		private string _OrgServiceList;
		
		private string _OrgProgrammeList;
		
		private System.Nullable<int> _TrustDistrictID;
		
		private System.Nullable<int> _TrustRegionID;
		
		private int _ExpressionOfInterest;
		
		private EntitySet<Directorate> _Directorates;
		
		private EntitySet<SupportingMaterial> _SupportingMaterials;
		
		private EntitySet<OrganisationLinkService> _OrganisationLinkServices;
		
		private EntitySet<Premise> _Premises;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnOrgNameChanging(string value);
    partial void OnOrgNameChanged();
    partial void OnOrgShortDescriptionChanging(string value);
    partial void OnOrgShortDescriptionChanged();
    partial void OnOrgFullDescriptionChanging(string value);
    partial void OnOrgFullDescriptionChanged();
    partial void OnLeadContactIDChanging(System.Nullable<int> value);
    partial void OnLeadContactIDChanged();
    partial void OnTypeOfBusinessChanging(string value);
    partial void OnTypeOfBusinessChanged();
    partial void OnOrgSICCodeChanging(int value);
    partial void OnOrgSICCodeChanged();
    partial void OnOrgAddr1Changing(string value);
    partial void OnOrgAddr1Changed();
    partial void OnOrgAddr2Changing(string value);
    partial void OnOrgAddr2Changed();
    partial void OnOrgAddr3Changing(string value);
    partial void OnOrgAddr3Changed();
    partial void OnOrgPostCodeChanging(string value);
    partial void OnOrgPostCodeChanged();
    partial void OnOrgPhoneChanging(string value);
    partial void OnOrgPhoneChanged();
    partial void OnOrgFaxChanging(string value);
    partial void OnOrgFaxChanged();
    partial void OnOrgEmailChanging(string value);
    partial void OnOrgEmailChanged();
    partial void OnOrgWebAddrChanging(string value);
    partial void OnOrgWebAddrChanged();
    partial void OnOrgExprListChanging(string value);
    partial void OnOrgExprListChanged();
    partial void OnOrgCharNumbChanging(System.Nullable<decimal> value);
    partial void OnOrgCharNumbChanged();
    partial void OnOrgCompNumbChanging(System.Nullable<decimal> value);
    partial void OnOrgCompNumbChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnCityTownChanging(string value);
    partial void OnCityTownChanged();
    partial void OnRefListIDChanging(string value);
    partial void OnRefListIDChanged();
    partial void OnOrgIsPreterredChanging(int value);
    partial void OnOrgIsPreterredChanged();
    partial void OnOrgIsActiveChanging(int value);
    partial void OnOrgIsActiveChanged();
    partial void OnOrgServiceListChanging(string value);
    partial void OnOrgServiceListChanged();
    partial void OnOrgProgrammeListChanging(string value);
    partial void OnOrgProgrammeListChanged();
    partial void OnTrustDistrictIDChanging(System.Nullable<int> value);
    partial void OnTrustDistrictIDChanged();
    partial void OnTrustRegionIDChanging(System.Nullable<int> value);
    partial void OnTrustRegionIDChanged();
    partial void OnExpressionOfInterestChanging(int value);
    partial void OnExpressionOfInterestChanged();
    #endregion
		
		public Organisation()
		{
			this._Directorates = new EntitySet<Directorate>(new Action<Directorate>(this.attach_Directorates), new Action<Directorate>(this.detach_Directorates));
			this._SupportingMaterials = new EntitySet<SupportingMaterial>(new Action<SupportingMaterial>(this.attach_SupportingMaterials), new Action<SupportingMaterial>(this.detach_SupportingMaterials));
			this._OrganisationLinkServices = new EntitySet<OrganisationLinkService>(new Action<OrganisationLinkService>(this.attach_OrganisationLinkServices), new Action<OrganisationLinkService>(this.detach_OrganisationLinkServices));
			this._Premises = new EntitySet<Premise>(new Action<Premise>(this.attach_Premises), new Action<Premise>(this.detach_Premises));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string OrgName
		{
			get
			{
				return this._OrgName;
			}
			set
			{
				if ((this._OrgName != value))
				{
					this.OnOrgNameChanging(value);
					this.SendPropertyChanging();
					this._OrgName = value;
					this.SendPropertyChanged("OrgName");
					this.OnOrgNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgShortDescription", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string OrgShortDescription
		{
			get
			{
				return this._OrgShortDescription;
			}
			set
			{
				if ((this._OrgShortDescription != value))
				{
					this.OnOrgShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._OrgShortDescription = value;
					this.SendPropertyChanged("OrgShortDescription");
					this.OnOrgShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgFullDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string OrgFullDescription
		{
			get
			{
				return this._OrgFullDescription;
			}
			set
			{
				if ((this._OrgFullDescription != value))
				{
					this.OnOrgFullDescriptionChanging(value);
					this.SendPropertyChanging();
					this._OrgFullDescription = value;
					this.SendPropertyChanged("OrgFullDescription");
					this.OnOrgFullDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadContactID", DbType="Int")]
		public System.Nullable<int> LeadContactID
		{
			get
			{
				return this._LeadContactID;
			}
			set
			{
				if ((this._LeadContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadContactIDChanging(value);
					this.SendPropertyChanging();
					this._LeadContactID = value;
					this.SendPropertyChanged("LeadContactID");
					this.OnLeadContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfBusiness", DbType="VarChar(100)")]
		public string TypeOfBusiness
		{
			get
			{
				return this._TypeOfBusiness;
			}
			set
			{
				if ((this._TypeOfBusiness != value))
				{
					this.OnTypeOfBusinessChanging(value);
					this.SendPropertyChanging();
					this._TypeOfBusiness = value;
					this.SendPropertyChanged("TypeOfBusiness");
					this.OnTypeOfBusinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgSICCode", DbType="Int NOT NULL")]
		public int OrgSICCode
		{
			get
			{
				return this._OrgSICCode;
			}
			set
			{
				if ((this._OrgSICCode != value))
				{
					this.OnOrgSICCodeChanging(value);
					this.SendPropertyChanging();
					this._OrgSICCode = value;
					this.SendPropertyChanged("OrgSICCode");
					this.OnOrgSICCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAddr1", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string OrgAddr1
		{
			get
			{
				return this._OrgAddr1;
			}
			set
			{
				if ((this._OrgAddr1 != value))
				{
					this.OnOrgAddr1Changing(value);
					this.SendPropertyChanging();
					this._OrgAddr1 = value;
					this.SendPropertyChanged("OrgAddr1");
					this.OnOrgAddr1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAddr2", DbType="VarChar(150)")]
		public string OrgAddr2
		{
			get
			{
				return this._OrgAddr2;
			}
			set
			{
				if ((this._OrgAddr2 != value))
				{
					this.OnOrgAddr2Changing(value);
					this.SendPropertyChanging();
					this._OrgAddr2 = value;
					this.SendPropertyChanged("OrgAddr2");
					this.OnOrgAddr2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAddr3", DbType="VarChar(150)")]
		public string OrgAddr3
		{
			get
			{
				return this._OrgAddr3;
			}
			set
			{
				if ((this._OrgAddr3 != value))
				{
					this.OnOrgAddr3Changing(value);
					this.SendPropertyChanging();
					this._OrgAddr3 = value;
					this.SendPropertyChanged("OrgAddr3");
					this.OnOrgAddr3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgPostCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrgPostCode
		{
			get
			{
				return this._OrgPostCode;
			}
			set
			{
				if ((this._OrgPostCode != value))
				{
					this.OnOrgPostCodeChanging(value);
					this.SendPropertyChanging();
					this._OrgPostCode = value;
					this.SendPropertyChanged("OrgPostCode");
					this.OnOrgPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgPhone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrgPhone
		{
			get
			{
				return this._OrgPhone;
			}
			set
			{
				if ((this._OrgPhone != value))
				{
					this.OnOrgPhoneChanging(value);
					this.SendPropertyChanging();
					this._OrgPhone = value;
					this.SendPropertyChanged("OrgPhone");
					this.OnOrgPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgFax", DbType="VarChar(50)")]
		public string OrgFax
		{
			get
			{
				return this._OrgFax;
			}
			set
			{
				if ((this._OrgFax != value))
				{
					this.OnOrgFaxChanging(value);
					this.SendPropertyChanging();
					this._OrgFax = value;
					this.SendPropertyChanged("OrgFax");
					this.OnOrgFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgEmail", DbType="VarChar(50)")]
		public string OrgEmail
		{
			get
			{
				return this._OrgEmail;
			}
			set
			{
				if ((this._OrgEmail != value))
				{
					this.OnOrgEmailChanging(value);
					this.SendPropertyChanging();
					this._OrgEmail = value;
					this.SendPropertyChanged("OrgEmail");
					this.OnOrgEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgWebAddr", DbType="VarChar(100)")]
		public string OrgWebAddr
		{
			get
			{
				return this._OrgWebAddr;
			}
			set
			{
				if ((this._OrgWebAddr != value))
				{
					this.OnOrgWebAddrChanging(value);
					this.SendPropertyChanging();
					this._OrgWebAddr = value;
					this.SendPropertyChanged("OrgWebAddr");
					this.OnOrgWebAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgExprList", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string OrgExprList
		{
			get
			{
				return this._OrgExprList;
			}
			set
			{
				if ((this._OrgExprList != value))
				{
					this.OnOrgExprListChanging(value);
					this.SendPropertyChanging();
					this._OrgExprList = value;
					this.SendPropertyChanged("OrgExprList");
					this.OnOrgExprListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgCharNumb", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> OrgCharNumb
		{
			get
			{
				return this._OrgCharNumb;
			}
			set
			{
				if ((this._OrgCharNumb != value))
				{
					this.OnOrgCharNumbChanging(value);
					this.SendPropertyChanging();
					this._OrgCharNumb = value;
					this.SendPropertyChanged("OrgCharNumb");
					this.OnOrgCharNumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgCompNumb", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> OrgCompNumb
		{
			get
			{
				return this._OrgCompNumb;
			}
			set
			{
				if ((this._OrgCompNumb != value))
				{
					this.OnOrgCompNumbChanging(value);
					this.SendPropertyChanging();
					this._OrgCompNumb = value;
					this.SendPropertyChanged("OrgCompNumb");
					this.OnOrgCompNumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_County", DbType="VarChar(50)")]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityTown", DbType="VarChar(50)")]
		public string CityTown
		{
			get
			{
				return this._CityTown;
			}
			set
			{
				if ((this._CityTown != value))
				{
					this.OnCityTownChanging(value);
					this.SendPropertyChanging();
					this._CityTown = value;
					this.SendPropertyChanged("CityTown");
					this.OnCityTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefListID", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string RefListID
		{
			get
			{
				return this._RefListID;
			}
			set
			{
				if ((this._RefListID != value))
				{
					this.OnRefListIDChanging(value);
					this.SendPropertyChanging();
					this._RefListID = value;
					this.SendPropertyChanged("RefListID");
					this.OnRefListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgIsPreterred", DbType="Int NOT NULL")]
		public int OrgIsPreterred
		{
			get
			{
				return this._OrgIsPreterred;
			}
			set
			{
				if ((this._OrgIsPreterred != value))
				{
					this.OnOrgIsPreterredChanging(value);
					this.SendPropertyChanging();
					this._OrgIsPreterred = value;
					this.SendPropertyChanged("OrgIsPreterred");
					this.OnOrgIsPreterredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgIsActive", DbType="Int NOT NULL")]
		public int OrgIsActive
		{
			get
			{
				return this._OrgIsActive;
			}
			set
			{
				if ((this._OrgIsActive != value))
				{
					this.OnOrgIsActiveChanging(value);
					this.SendPropertyChanging();
					this._OrgIsActive = value;
					this.SendPropertyChanged("OrgIsActive");
					this.OnOrgIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgServiceList", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string OrgServiceList
		{
			get
			{
				return this._OrgServiceList;
			}
			set
			{
				if ((this._OrgServiceList != value))
				{
					this.OnOrgServiceListChanging(value);
					this.SendPropertyChanging();
					this._OrgServiceList = value;
					this.SendPropertyChanged("OrgServiceList");
					this.OnOrgServiceListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgProgrammeList", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string OrgProgrammeList
		{
			get
			{
				return this._OrgProgrammeList;
			}
			set
			{
				if ((this._OrgProgrammeList != value))
				{
					this.OnOrgProgrammeListChanging(value);
					this.SendPropertyChanging();
					this._OrgProgrammeList = value;
					this.SendPropertyChanged("OrgProgrammeList");
					this.OnOrgProgrammeListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustDistrictID", DbType="Int")]
		public System.Nullable<int> TrustDistrictID
		{
			get
			{
				return this._TrustDistrictID;
			}
			set
			{
				if ((this._TrustDistrictID != value))
				{
					this.OnTrustDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._TrustDistrictID = value;
					this.SendPropertyChanged("TrustDistrictID");
					this.OnTrustDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrustRegionID", DbType="Int")]
		public System.Nullable<int> TrustRegionID
		{
			get
			{
				return this._TrustRegionID;
			}
			set
			{
				if ((this._TrustRegionID != value))
				{
					this.OnTrustRegionIDChanging(value);
					this.SendPropertyChanging();
					this._TrustRegionID = value;
					this.SendPropertyChanged("TrustRegionID");
					this.OnTrustRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpressionOfInterest", DbType="Int NOT NULL")]
		public int ExpressionOfInterest
		{
			get
			{
				return this._ExpressionOfInterest;
			}
			set
			{
				if ((this._ExpressionOfInterest != value))
				{
					this.OnExpressionOfInterestChanging(value);
					this.SendPropertyChanging();
					this._ExpressionOfInterest = value;
					this.SendPropertyChanged("ExpressionOfInterest");
					this.OnExpressionOfInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Directorate", Storage="_Directorates", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Directorate> Directorates
		{
			get
			{
				return this._Directorates;
			}
			set
			{
				this._Directorates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_SupportingMaterial", Storage="_SupportingMaterials", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<SupportingMaterial> SupportingMaterials
		{
			get
			{
				return this._SupportingMaterials;
			}
			set
			{
				this._SupportingMaterials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationLinkService", Storage="_OrganisationLinkServices", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<OrganisationLinkService> OrganisationLinkServices
		{
			get
			{
				return this._OrganisationLinkServices;
			}
			set
			{
				this._OrganisationLinkServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Premise", Storage="_Premises", ThisKey="OrgID", OtherKey="LocationOrganisation")]
		public EntitySet<Premise> Premises
		{
			get
			{
				return this._Premises;
			}
			set
			{
				this._Premises.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Organisation", Storage="_Contact", ThisKey="LeadContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Organisations.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Organisations.Add(this);
						this._LeadContactID = value.ContactID;
					}
					else
					{
						this._LeadContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Directorates(Directorate entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Directorates(Directorate entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_SupportingMaterials(SupportingMaterial entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_SupportingMaterials(SupportingMaterial entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_OrganisationLinkServices(OrganisationLinkService entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_OrganisationLinkServices(OrganisationLinkService entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Premises(Premise entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Premises(Premise entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Programme")]
	public partial class Programme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgrammeID;
		
		private string _ProgrammeName;
		
		private string _Description;
		
		private System.Nullable<int> _ContactID;
		
		private int _ProgrammeIsActivate;
		
		private EntitySet<Service> _Services;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgrammeIDChanging(int value);
    partial void OnProgrammeIDChanged();
    partial void OnProgrammeNameChanging(string value);
    partial void OnProgrammeNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    partial void OnProgrammeIsActivateChanging(int value);
    partial void OnProgrammeIsActivateChanged();
    #endregion
		
		public Programme()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgrammeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProgrammeID
		{
			get
			{
				return this._ProgrammeID;
			}
			set
			{
				if ((this._ProgrammeID != value))
				{
					this.OnProgrammeIDChanging(value);
					this.SendPropertyChanging();
					this._ProgrammeID = value;
					this.SendPropertyChanged("ProgrammeID");
					this.OnProgrammeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgrammeName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ProgrammeName
		{
			get
			{
				return this._ProgrammeName;
			}
			set
			{
				if ((this._ProgrammeName != value))
				{
					this.OnProgrammeNameChanging(value);
					this.SendPropertyChanging();
					this._ProgrammeName = value;
					this.SendPropertyChanged("ProgrammeName");
					this.OnProgrammeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgrammeIsActivate", DbType="Int NOT NULL")]
		public int ProgrammeIsActivate
		{
			get
			{
				return this._ProgrammeIsActivate;
			}
			set
			{
				if ((this._ProgrammeIsActivate != value))
				{
					this.OnProgrammeIsActivateChanging(value);
					this.SendPropertyChanging();
					this._ProgrammeIsActivate = value;
					this.SendPropertyChanged("ProgrammeIsActivate");
					this.OnProgrammeIsActivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Programme_Service", Storage="_Services", ThisKey="ProgrammeID", OtherKey="ProgrammeID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Programme", Storage="_Contact", ThisKey="ContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Programmes.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Programmes.Add(this);
						this._ContactID = value.ContactID;
					}
					else
					{
						this._ContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Programme = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Programme = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Premise")]
	public partial class Premise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PremiseID;
		
		private string _LocationName;
		
		private int _PrimaryLocation;
		
		private int _LocationManaged;
		
		private string _KnownAS;
		
		private string _RefListID;
		
		private System.Nullable<int> _LocationOrganisation;
		
		private string _LocationStatus;
		
		private System.Nullable<System.DateTime> _LocationStatusDate;
		
		private string _LocationDescription;
		
		private string _PremiseAddr1;
		
		private string _PremiseAddr2;
		
		private string _PremiseAddr3;
		
		private string _PremisePostCode;
		
		private System.Nullable<int> _CountryID;
		
		private string _County;
		
		private string _CityTown;
		
		private string _PremisePhone;
		
		private string _PremisFax;
		
		private string _PremisMinicomn;
		
		private int _PremiseIsNew;
		
		private System.Nullable<System.DateTime> _PremiseShopFlagDate;
		
		private int _PremiseSpecialistShop;
		
		private string _SerLinkListID;
		
		private int _PremiseIsActive;
		
		private EntityRef<PremiseDetail> _PremiseDetail;
		
		private EntityRef<PermiseDetailForCost> _PermiseDetailForCost;
		
		private EntitySet<Facility> _Facilities;
		
		private EntitySet<Volunteering> _Volunteerings;
		
		private EntitySet<ProjectMinorWork> _ProjectMinorWorks;
		
		private EntitySet<PremiseLinkService> _PremiseLinkServices;
		
		private EntityRef<PremiseOpenSchedule> _PremiseOpenSchedule;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPremiseIDChanging(int value);
    partial void OnPremiseIDChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnPrimaryLocationChanging(int value);
    partial void OnPrimaryLocationChanged();
    partial void OnLocationManagedChanging(int value);
    partial void OnLocationManagedChanged();
    partial void OnKnownASChanging(string value);
    partial void OnKnownASChanged();
    partial void OnRefListIDChanging(string value);
    partial void OnRefListIDChanged();
    partial void OnLocationOrganisationChanging(System.Nullable<int> value);
    partial void OnLocationOrganisationChanged();
    partial void OnLocationStatusChanging(string value);
    partial void OnLocationStatusChanged();
    partial void OnLocationStatusDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLocationStatusDateChanged();
    partial void OnLocationDescriptionChanging(string value);
    partial void OnLocationDescriptionChanged();
    partial void OnPremiseAddr1Changing(string value);
    partial void OnPremiseAddr1Changed();
    partial void OnPremiseAddr2Changing(string value);
    partial void OnPremiseAddr2Changed();
    partial void OnPremiseAddr3Changing(string value);
    partial void OnPremiseAddr3Changed();
    partial void OnPremisePostCodeChanging(string value);
    partial void OnPremisePostCodeChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnCityTownChanging(string value);
    partial void OnCityTownChanged();
    partial void OnPremisePhoneChanging(string value);
    partial void OnPremisePhoneChanged();
    partial void OnPremisFaxChanging(string value);
    partial void OnPremisFaxChanged();
    partial void OnPremisMinicomnChanging(string value);
    partial void OnPremisMinicomnChanged();
    partial void OnPremiseIsNewChanging(int value);
    partial void OnPremiseIsNewChanged();
    partial void OnPremiseShopFlagDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPremiseShopFlagDateChanged();
    partial void OnPremiseSpecialistShopChanging(int value);
    partial void OnPremiseSpecialistShopChanged();
    partial void OnSerLinkListIDChanging(string value);
    partial void OnSerLinkListIDChanged();
    partial void OnPremiseIsActiveChanging(int value);
    partial void OnPremiseIsActiveChanged();
    #endregion
		
		public Premise()
		{
			this._PremiseDetail = default(EntityRef<PremiseDetail>);
			this._PermiseDetailForCost = default(EntityRef<PermiseDetailForCost>);
			this._Facilities = new EntitySet<Facility>(new Action<Facility>(this.attach_Facilities), new Action<Facility>(this.detach_Facilities));
			this._Volunteerings = new EntitySet<Volunteering>(new Action<Volunteering>(this.attach_Volunteerings), new Action<Volunteering>(this.detach_Volunteerings));
			this._ProjectMinorWorks = new EntitySet<ProjectMinorWork>(new Action<ProjectMinorWork>(this.attach_ProjectMinorWorks), new Action<ProjectMinorWork>(this.detach_ProjectMinorWorks));
			this._PremiseLinkServices = new EntitySet<PremiseLinkService>(new Action<PremiseLinkService>(this.attach_PremiseLinkServices), new Action<PremiseLinkService>(this.detach_PremiseLinkServices));
			this._PremiseOpenSchedule = default(EntityRef<PremiseOpenSchedule>);
			this._Contact = default(EntityRef<Contact>);
			this._Country = default(EntityRef<Country>);
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PremiseID
		{
			get
			{
				return this._PremiseID;
			}
			set
			{
				if ((this._PremiseID != value))
				{
					this.OnPremiseIDChanging(value);
					this.SendPropertyChanging();
					this._PremiseID = value;
					this.SendPropertyChanged("PremiseID");
					this.OnPremiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryLocation", DbType="Int NOT NULL")]
		public int PrimaryLocation
		{
			get
			{
				return this._PrimaryLocation;
			}
			set
			{
				if ((this._PrimaryLocation != value))
				{
					this.OnPrimaryLocationChanging(value);
					this.SendPropertyChanging();
					this._PrimaryLocation = value;
					this.SendPropertyChanged("PrimaryLocation");
					this.OnPrimaryLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationManaged", DbType="Int NOT NULL")]
		public int LocationManaged
		{
			get
			{
				return this._LocationManaged;
			}
			set
			{
				if ((this._LocationManaged != value))
				{
					this.OnLocationManagedChanging(value);
					this.SendPropertyChanging();
					this._LocationManaged = value;
					this.SendPropertyChanged("LocationManaged");
					this.OnLocationManagedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnownAS", DbType="VarChar(100)")]
		public string KnownAS
		{
			get
			{
				return this._KnownAS;
			}
			set
			{
				if ((this._KnownAS != value))
				{
					this.OnKnownASChanging(value);
					this.SendPropertyChanging();
					this._KnownAS = value;
					this.SendPropertyChanged("KnownAS");
					this.OnKnownASChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefListID", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string RefListID
		{
			get
			{
				return this._RefListID;
			}
			set
			{
				if ((this._RefListID != value))
				{
					this.OnRefListIDChanging(value);
					this.SendPropertyChanging();
					this._RefListID = value;
					this.SendPropertyChanged("RefListID");
					this.OnRefListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationOrganisation", DbType="Int")]
		public System.Nullable<int> LocationOrganisation
		{
			get
			{
				return this._LocationOrganisation;
			}
			set
			{
				if ((this._LocationOrganisation != value))
				{
					if ((this._Contact.HasLoadedOrAssignedValue || this._Organisation.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationOrganisationChanging(value);
					this.SendPropertyChanging();
					this._LocationOrganisation = value;
					this.SendPropertyChanged("LocationOrganisation");
					this.OnLocationOrganisationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationStatus", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LocationStatus
		{
			get
			{
				return this._LocationStatus;
			}
			set
			{
				if ((this._LocationStatus != value))
				{
					this.OnLocationStatusChanging(value);
					this.SendPropertyChanging();
					this._LocationStatus = value;
					this.SendPropertyChanged("LocationStatus");
					this.OnLocationStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationStatusDate", DbType="Date")]
		public System.Nullable<System.DateTime> LocationStatusDate
		{
			get
			{
				return this._LocationStatusDate;
			}
			set
			{
				if ((this._LocationStatusDate != value))
				{
					this.OnLocationStatusDateChanging(value);
					this.SendPropertyChanging();
					this._LocationStatusDate = value;
					this.SendPropertyChanged("LocationStatusDate");
					this.OnLocationStatusDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string LocationDescription
		{
			get
			{
				return this._LocationDescription;
			}
			set
			{
				if ((this._LocationDescription != value))
				{
					this.OnLocationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LocationDescription = value;
					this.SendPropertyChanged("LocationDescription");
					this.OnLocationDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseAddr1", DbType="VarChar(100)")]
		public string PremiseAddr1
		{
			get
			{
				return this._PremiseAddr1;
			}
			set
			{
				if ((this._PremiseAddr1 != value))
				{
					this.OnPremiseAddr1Changing(value);
					this.SendPropertyChanging();
					this._PremiseAddr1 = value;
					this.SendPropertyChanged("PremiseAddr1");
					this.OnPremiseAddr1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseAddr2", DbType="VarChar(100)")]
		public string PremiseAddr2
		{
			get
			{
				return this._PremiseAddr2;
			}
			set
			{
				if ((this._PremiseAddr2 != value))
				{
					this.OnPremiseAddr2Changing(value);
					this.SendPropertyChanging();
					this._PremiseAddr2 = value;
					this.SendPropertyChanged("PremiseAddr2");
					this.OnPremiseAddr2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseAddr3", DbType="VarChar(100)")]
		public string PremiseAddr3
		{
			get
			{
				return this._PremiseAddr3;
			}
			set
			{
				if ((this._PremiseAddr3 != value))
				{
					this.OnPremiseAddr3Changing(value);
					this.SendPropertyChanging();
					this._PremiseAddr3 = value;
					this.SendPropertyChanged("PremiseAddr3");
					this.OnPremiseAddr3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremisePostCode", DbType="VarChar(10)")]
		public string PremisePostCode
		{
			get
			{
				return this._PremisePostCode;
			}
			set
			{
				if ((this._PremisePostCode != value))
				{
					this.OnPremisePostCodeChanging(value);
					this.SendPropertyChanging();
					this._PremisePostCode = value;
					this.SendPropertyChanged("PremisePostCode");
					this.OnPremisePostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_County", DbType="VarChar(100)")]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityTown", DbType="VarChar(100)")]
		public string CityTown
		{
			get
			{
				return this._CityTown;
			}
			set
			{
				if ((this._CityTown != value))
				{
					this.OnCityTownChanging(value);
					this.SendPropertyChanging();
					this._CityTown = value;
					this.SendPropertyChanged("CityTown");
					this.OnCityTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremisePhone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PremisePhone
		{
			get
			{
				return this._PremisePhone;
			}
			set
			{
				if ((this._PremisePhone != value))
				{
					this.OnPremisePhoneChanging(value);
					this.SendPropertyChanging();
					this._PremisePhone = value;
					this.SendPropertyChanged("PremisePhone");
					this.OnPremisePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremisFax", DbType="VarChar(50)")]
		public string PremisFax
		{
			get
			{
				return this._PremisFax;
			}
			set
			{
				if ((this._PremisFax != value))
				{
					this.OnPremisFaxChanging(value);
					this.SendPropertyChanging();
					this._PremisFax = value;
					this.SendPropertyChanged("PremisFax");
					this.OnPremisFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremisMinicomn", DbType="VarChar(50)")]
		public string PremisMinicomn
		{
			get
			{
				return this._PremisMinicomn;
			}
			set
			{
				if ((this._PremisMinicomn != value))
				{
					this.OnPremisMinicomnChanging(value);
					this.SendPropertyChanging();
					this._PremisMinicomn = value;
					this.SendPropertyChanged("PremisMinicomn");
					this.OnPremisMinicomnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseIsNew", DbType="Int NOT NULL")]
		public int PremiseIsNew
		{
			get
			{
				return this._PremiseIsNew;
			}
			set
			{
				if ((this._PremiseIsNew != value))
				{
					this.OnPremiseIsNewChanging(value);
					this.SendPropertyChanging();
					this._PremiseIsNew = value;
					this.SendPropertyChanged("PremiseIsNew");
					this.OnPremiseIsNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseShopFlagDate", DbType="Date")]
		public System.Nullable<System.DateTime> PremiseShopFlagDate
		{
			get
			{
				return this._PremiseShopFlagDate;
			}
			set
			{
				if ((this._PremiseShopFlagDate != value))
				{
					this.OnPremiseShopFlagDateChanging(value);
					this.SendPropertyChanging();
					this._PremiseShopFlagDate = value;
					this.SendPropertyChanged("PremiseShopFlagDate");
					this.OnPremiseShopFlagDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseSpecialistShop", DbType="Int NOT NULL")]
		public int PremiseSpecialistShop
		{
			get
			{
				return this._PremiseSpecialistShop;
			}
			set
			{
				if ((this._PremiseSpecialistShop != value))
				{
					this.OnPremiseSpecialistShopChanging(value);
					this.SendPropertyChanging();
					this._PremiseSpecialistShop = value;
					this.SendPropertyChanged("PremiseSpecialistShop");
					this.OnPremiseSpecialistShopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerLinkListID", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SerLinkListID
		{
			get
			{
				return this._SerLinkListID;
			}
			set
			{
				if ((this._SerLinkListID != value))
				{
					this.OnSerLinkListIDChanging(value);
					this.SendPropertyChanging();
					this._SerLinkListID = value;
					this.SendPropertyChanged("SerLinkListID");
					this.OnSerLinkListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PremiseIsActive", DbType="Int NOT NULL")]
		public int PremiseIsActive
		{
			get
			{
				return this._PremiseIsActive;
			}
			set
			{
				if ((this._PremiseIsActive != value))
				{
					this.OnPremiseIsActiveChanging(value);
					this.SendPropertyChanging();
					this._PremiseIsActive = value;
					this.SendPropertyChanged("PremiseIsActive");
					this.OnPremiseIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_PremiseDetail", Storage="_PremiseDetail", ThisKey="PremiseID", OtherKey="PremiseID", IsUnique=true, IsForeignKey=false)]
		public PremiseDetail PremiseDetail
		{
			get
			{
				return this._PremiseDetail.Entity;
			}
			set
			{
				PremiseDetail previousValue = this._PremiseDetail.Entity;
				if (((previousValue != value) 
							|| (this._PremiseDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PremiseDetail.Entity = null;
						previousValue.Premise = null;
					}
					this._PremiseDetail.Entity = value;
					if ((value != null))
					{
						value.Premise = this;
					}
					this.SendPropertyChanged("PremiseDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_PermiseDetailForCost", Storage="_PermiseDetailForCost", ThisKey="PremiseID", OtherKey="PermiseID", IsUnique=true, IsForeignKey=false)]
		public PermiseDetailForCost PermiseDetailForCost
		{
			get
			{
				return this._PermiseDetailForCost.Entity;
			}
			set
			{
				PermiseDetailForCost previousValue = this._PermiseDetailForCost.Entity;
				if (((previousValue != value) 
							|| (this._PermiseDetailForCost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermiseDetailForCost.Entity = null;
						previousValue.Premise = null;
					}
					this._PermiseDetailForCost.Entity = value;
					if ((value != null))
					{
						value.Premise = this;
					}
					this.SendPropertyChanged("PermiseDetailForCost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_Facility", Storage="_Facilities", ThisKey="PremiseID", OtherKey="PremiseID")]
		public EntitySet<Facility> Facilities
		{
			get
			{
				return this._Facilities;
			}
			set
			{
				this._Facilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_Volunteering", Storage="_Volunteerings", ThisKey="PremiseID", OtherKey="PremiseID")]
		public EntitySet<Volunteering> Volunteerings
		{
			get
			{
				return this._Volunteerings;
			}
			set
			{
				this._Volunteerings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_ProjectMinorWork", Storage="_ProjectMinorWorks", ThisKey="PremiseID", OtherKey="PremiseID")]
		public EntitySet<ProjectMinorWork> ProjectMinorWorks
		{
			get
			{
				return this._ProjectMinorWorks;
			}
			set
			{
				this._ProjectMinorWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_PremiseLinkService", Storage="_PremiseLinkServices", ThisKey="PremiseID", OtherKey="PremiseID")]
		public EntitySet<PremiseLinkService> PremiseLinkServices
		{
			get
			{
				return this._PremiseLinkServices;
			}
			set
			{
				this._PremiseLinkServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Premise_PremiseOpenSchedule", Storage="_PremiseOpenSchedule", ThisKey="PremiseID", OtherKey="PremiseID", IsUnique=true, IsForeignKey=false)]
		public PremiseOpenSchedule PremiseOpenSchedule
		{
			get
			{
				return this._PremiseOpenSchedule.Entity;
			}
			set
			{
				PremiseOpenSchedule previousValue = this._PremiseOpenSchedule.Entity;
				if (((previousValue != value) 
							|| (this._PremiseOpenSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PremiseOpenSchedule.Entity = null;
						previousValue.Premise = null;
					}
					this._PremiseOpenSchedule.Entity = value;
					if ((value != null))
					{
						value.Premise = this;
					}
					this.SendPropertyChanged("PremiseOpenSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Premise", Storage="_Contact", ThisKey="LocationOrganisation", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Premises.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Premises.Add(this);
						this._LocationOrganisation = value.ContactID;
					}
					else
					{
						this._LocationOrganisation = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Premise", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Premises.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Premises.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Premise", Storage="_Organisation", ThisKey="LocationOrganisation", OtherKey="OrgID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Premises.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Premises.Add(this);
						this._LocationOrganisation = value.OrgID;
					}
					else
					{
						this._LocationOrganisation = default(Nullable<int>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.Premise = this;
		}
		
		private void detach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.Premise = null;
		}
		
		private void attach_Volunteerings(Volunteering entity)
		{
			this.SendPropertyChanging();
			entity.Premise = this;
		}
		
		private void detach_Volunteerings(Volunteering entity)
		{
			this.SendPropertyChanging();
			entity.Premise = null;
		}
		
		private void attach_ProjectMinorWorks(ProjectMinorWork entity)
		{
			this.SendPropertyChanging();
			entity.Premise = this;
		}
		
		private void detach_ProjectMinorWorks(ProjectMinorWork entity)
		{
			this.SendPropertyChanging();
			entity.Premise = null;
		}
		
		private void attach_PremiseLinkServices(PremiseLinkService entity)
		{
			this.SendPropertyChanging();
			entity.Premise = this;
		}
		
		private void detach_PremiseLinkServices(PremiseLinkService entity)
		{
			this.SendPropertyChanging();
			entity.Premise = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SerID;
		
		private string _SerName;
		
		private string _SerShortDescription;
		
		private string _SerFullDescription;
		
		private string _SerSubType;
		
		private string _SerDeptCode;
		
		private System.Nullable<int> _LeadContactID;
		
		private string _SerType;
		
		private string _ClientDescription;
		
		private string _SerDescriptionDelivery;
		
		private string _SerAttendance;
		
		private string _SerContractCode;
		
		private string _SerContractValue;
		
		private string _SerContractRefList;
		
		private System.Nullable<System.DateTime> _SerStartExpected;
		
		private System.Nullable<System.DateTime> _SerStartDate;
		
		private System.Nullable<System.DateTime> _SerEndDate;
		
		private System.Nullable<int> _SerExtendable;
		
		private System.Nullable<int> _SerExtendYear;
		
		private System.Nullable<int> _SerExtendMonth;
		
		private System.Nullable<int> _SerTimeLimited;
		
		private System.Nullable<int> _SerTimeLimitedYear;
		
		private System.Nullable<int> _SerTimeLimitedMonth;
		
		private System.Nullable<int> _SerStagedPayment;
		
		private string _SerReferralProcess;
		
		private string _SerDetail2RefList;
		
		private System.Nullable<int> _ProgrammeID;
		
		private int _SerIsActive;
		
		private string _OtherService;
		
		private string _SerDetail3RefList;
		
		private EntityRef<FundingDetail> _FundingDetail;
		
		private EntitySet<OrganisationLinkService> _OrganisationLinkServices;
		
		private EntitySet<PremiseLinkService> _PremiseLinkServices;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Programme> _Programme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSerIDChanging(int value);
    partial void OnSerIDChanged();
    partial void OnSerNameChanging(string value);
    partial void OnSerNameChanged();
    partial void OnSerShortDescriptionChanging(string value);
    partial void OnSerShortDescriptionChanged();
    partial void OnSerFullDescriptionChanging(string value);
    partial void OnSerFullDescriptionChanged();
    partial void OnSerSubTypeChanging(string value);
    partial void OnSerSubTypeChanged();
    partial void OnSerDeptCodeChanging(string value);
    partial void OnSerDeptCodeChanged();
    partial void OnLeadContactIDChanging(System.Nullable<int> value);
    partial void OnLeadContactIDChanged();
    partial void OnSerTypeChanging(string value);
    partial void OnSerTypeChanged();
    partial void OnClientDescriptionChanging(string value);
    partial void OnClientDescriptionChanged();
    partial void OnSerDescriptionDeliveryChanging(string value);
    partial void OnSerDescriptionDeliveryChanged();
    partial void OnSerAttendanceChanging(string value);
    partial void OnSerAttendanceChanged();
    partial void OnSerContractCodeChanging(string value);
    partial void OnSerContractCodeChanged();
    partial void OnSerContractValueChanging(string value);
    partial void OnSerContractValueChanged();
    partial void OnSerContractRefListChanging(string value);
    partial void OnSerContractRefListChanged();
    partial void OnSerStartExpectedChanging(System.Nullable<System.DateTime> value);
    partial void OnSerStartExpectedChanged();
    partial void OnSerStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSerStartDateChanged();
    partial void OnSerEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSerEndDateChanged();
    partial void OnSerExtendableChanging(System.Nullable<int> value);
    partial void OnSerExtendableChanged();
    partial void OnSerExtendYearChanging(System.Nullable<int> value);
    partial void OnSerExtendYearChanged();
    partial void OnSerExtendMonthChanging(System.Nullable<int> value);
    partial void OnSerExtendMonthChanged();
    partial void OnSerTimeLimitedChanging(System.Nullable<int> value);
    partial void OnSerTimeLimitedChanged();
    partial void OnSerTimeLimitedYearChanging(System.Nullable<int> value);
    partial void OnSerTimeLimitedYearChanged();
    partial void OnSerTimeLimitedMonthChanging(System.Nullable<int> value);
    partial void OnSerTimeLimitedMonthChanged();
    partial void OnSerStagedPaymentChanging(System.Nullable<int> value);
    partial void OnSerStagedPaymentChanged();
    partial void OnSerReferralProcessChanging(string value);
    partial void OnSerReferralProcessChanged();
    partial void OnSerDetail2RefListChanging(string value);
    partial void OnSerDetail2RefListChanged();
    partial void OnProgrammeIDChanging(System.Nullable<int> value);
    partial void OnProgrammeIDChanged();
    partial void OnSerIsActiveChanging(int value);
    partial void OnSerIsActiveChanged();
    partial void OnOtherServiceChanging(string value);
    partial void OnOtherServiceChanged();
    partial void OnSerDetail3RefListChanging(string value);
    partial void OnSerDetail3RefListChanged();
    #endregion
		
		public Service()
		{
			this._FundingDetail = default(EntityRef<FundingDetail>);
			this._OrganisationLinkServices = new EntitySet<OrganisationLinkService>(new Action<OrganisationLinkService>(this.attach_OrganisationLinkServices), new Action<OrganisationLinkService>(this.detach_OrganisationLinkServices));
			this._PremiseLinkServices = new EntitySet<PremiseLinkService>(new Action<PremiseLinkService>(this.attach_PremiseLinkServices), new Action<PremiseLinkService>(this.detach_PremiseLinkServices));
			this._Contact = default(EntityRef<Contact>);
			this._Programme = default(EntityRef<Programme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SerID
		{
			get
			{
				return this._SerID;
			}
			set
			{
				if ((this._SerID != value))
				{
					this.OnSerIDChanging(value);
					this.SendPropertyChanging();
					this._SerID = value;
					this.SendPropertyChanged("SerID");
					this.OnSerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SerName
		{
			get
			{
				return this._SerName;
			}
			set
			{
				if ((this._SerName != value))
				{
					this.OnSerNameChanging(value);
					this.SendPropertyChanging();
					this._SerName = value;
					this.SendPropertyChanged("SerName");
					this.OnSerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerShortDescription", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SerShortDescription
		{
			get
			{
				return this._SerShortDescription;
			}
			set
			{
				if ((this._SerShortDescription != value))
				{
					this.OnSerShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SerShortDescription = value;
					this.SendPropertyChanged("SerShortDescription");
					this.OnSerShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerFullDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SerFullDescription
		{
			get
			{
				return this._SerFullDescription;
			}
			set
			{
				if ((this._SerFullDescription != value))
				{
					this.OnSerFullDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SerFullDescription = value;
					this.SendPropertyChanged("SerFullDescription");
					this.OnSerFullDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerSubType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SerSubType
		{
			get
			{
				return this._SerSubType;
			}
			set
			{
				if ((this._SerSubType != value))
				{
					this.OnSerSubTypeChanging(value);
					this.SendPropertyChanging();
					this._SerSubType = value;
					this.SendPropertyChanged("SerSubType");
					this.OnSerSubTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerDeptCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SerDeptCode
		{
			get
			{
				return this._SerDeptCode;
			}
			set
			{
				if ((this._SerDeptCode != value))
				{
					this.OnSerDeptCodeChanging(value);
					this.SendPropertyChanging();
					this._SerDeptCode = value;
					this.SendPropertyChanged("SerDeptCode");
					this.OnSerDeptCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadContactID", DbType="Int")]
		public System.Nullable<int> LeadContactID
		{
			get
			{
				return this._LeadContactID;
			}
			set
			{
				if ((this._LeadContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadContactIDChanging(value);
					this.SendPropertyChanging();
					this._LeadContactID = value;
					this.SendPropertyChanged("LeadContactID");
					this.OnLeadContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SerType
		{
			get
			{
				return this._SerType;
			}
			set
			{
				if ((this._SerType != value))
				{
					this.OnSerTypeChanging(value);
					this.SendPropertyChanging();
					this._SerType = value;
					this.SendPropertyChanged("SerType");
					this.OnSerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ClientDescription
		{
			get
			{
				return this._ClientDescription;
			}
			set
			{
				if ((this._ClientDescription != value))
				{
					this.OnClientDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ClientDescription = value;
					this.SendPropertyChanged("ClientDescription");
					this.OnClientDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerDescriptionDelivery", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SerDescriptionDelivery
		{
			get
			{
				return this._SerDescriptionDelivery;
			}
			set
			{
				if ((this._SerDescriptionDelivery != value))
				{
					this.OnSerDescriptionDeliveryChanging(value);
					this.SendPropertyChanging();
					this._SerDescriptionDelivery = value;
					this.SendPropertyChanged("SerDescriptionDelivery");
					this.OnSerDescriptionDeliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerAttendance", DbType="VarChar(20)")]
		public string SerAttendance
		{
			get
			{
				return this._SerAttendance;
			}
			set
			{
				if ((this._SerAttendance != value))
				{
					this.OnSerAttendanceChanging(value);
					this.SendPropertyChanging();
					this._SerAttendance = value;
					this.SendPropertyChanged("SerAttendance");
					this.OnSerAttendanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerContractCode", DbType="VarChar(20)")]
		public string SerContractCode
		{
			get
			{
				return this._SerContractCode;
			}
			set
			{
				if ((this._SerContractCode != value))
				{
					this.OnSerContractCodeChanging(value);
					this.SendPropertyChanging();
					this._SerContractCode = value;
					this.SendPropertyChanged("SerContractCode");
					this.OnSerContractCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerContractValue", DbType="VarChar(100)")]
		public string SerContractValue
		{
			get
			{
				return this._SerContractValue;
			}
			set
			{
				if ((this._SerContractValue != value))
				{
					this.OnSerContractValueChanging(value);
					this.SendPropertyChanging();
					this._SerContractValue = value;
					this.SendPropertyChanged("SerContractValue");
					this.OnSerContractValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerContractRefList", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SerContractRefList
		{
			get
			{
				return this._SerContractRefList;
			}
			set
			{
				if ((this._SerContractRefList != value))
				{
					this.OnSerContractRefListChanging(value);
					this.SendPropertyChanging();
					this._SerContractRefList = value;
					this.SendPropertyChanged("SerContractRefList");
					this.OnSerContractRefListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerStartExpected", DbType="Date")]
		public System.Nullable<System.DateTime> SerStartExpected
		{
			get
			{
				return this._SerStartExpected;
			}
			set
			{
				if ((this._SerStartExpected != value))
				{
					this.OnSerStartExpectedChanging(value);
					this.SendPropertyChanging();
					this._SerStartExpected = value;
					this.SendPropertyChanged("SerStartExpected");
					this.OnSerStartExpectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerStartDate", DbType="Date")]
		public System.Nullable<System.DateTime> SerStartDate
		{
			get
			{
				return this._SerStartDate;
			}
			set
			{
				if ((this._SerStartDate != value))
				{
					this.OnSerStartDateChanging(value);
					this.SendPropertyChanging();
					this._SerStartDate = value;
					this.SendPropertyChanged("SerStartDate");
					this.OnSerStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> SerEndDate
		{
			get
			{
				return this._SerEndDate;
			}
			set
			{
				if ((this._SerEndDate != value))
				{
					this.OnSerEndDateChanging(value);
					this.SendPropertyChanging();
					this._SerEndDate = value;
					this.SendPropertyChanged("SerEndDate");
					this.OnSerEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerExtendable", DbType="Int")]
		public System.Nullable<int> SerExtendable
		{
			get
			{
				return this._SerExtendable;
			}
			set
			{
				if ((this._SerExtendable != value))
				{
					this.OnSerExtendableChanging(value);
					this.SendPropertyChanging();
					this._SerExtendable = value;
					this.SendPropertyChanged("SerExtendable");
					this.OnSerExtendableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerExtendYear", DbType="Int")]
		public System.Nullable<int> SerExtendYear
		{
			get
			{
				return this._SerExtendYear;
			}
			set
			{
				if ((this._SerExtendYear != value))
				{
					this.OnSerExtendYearChanging(value);
					this.SendPropertyChanging();
					this._SerExtendYear = value;
					this.SendPropertyChanged("SerExtendYear");
					this.OnSerExtendYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerExtendMonth", DbType="Int")]
		public System.Nullable<int> SerExtendMonth
		{
			get
			{
				return this._SerExtendMonth;
			}
			set
			{
				if ((this._SerExtendMonth != value))
				{
					this.OnSerExtendMonthChanging(value);
					this.SendPropertyChanging();
					this._SerExtendMonth = value;
					this.SendPropertyChanged("SerExtendMonth");
					this.OnSerExtendMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerTimeLimited", DbType="Int")]
		public System.Nullable<int> SerTimeLimited
		{
			get
			{
				return this._SerTimeLimited;
			}
			set
			{
				if ((this._SerTimeLimited != value))
				{
					this.OnSerTimeLimitedChanging(value);
					this.SendPropertyChanging();
					this._SerTimeLimited = value;
					this.SendPropertyChanged("SerTimeLimited");
					this.OnSerTimeLimitedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerTimeLimitedYear", DbType="Int")]
		public System.Nullable<int> SerTimeLimitedYear
		{
			get
			{
				return this._SerTimeLimitedYear;
			}
			set
			{
				if ((this._SerTimeLimitedYear != value))
				{
					this.OnSerTimeLimitedYearChanging(value);
					this.SendPropertyChanging();
					this._SerTimeLimitedYear = value;
					this.SendPropertyChanged("SerTimeLimitedYear");
					this.OnSerTimeLimitedYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerTimeLimitedMonth", DbType="Int")]
		public System.Nullable<int> SerTimeLimitedMonth
		{
			get
			{
				return this._SerTimeLimitedMonth;
			}
			set
			{
				if ((this._SerTimeLimitedMonth != value))
				{
					this.OnSerTimeLimitedMonthChanging(value);
					this.SendPropertyChanging();
					this._SerTimeLimitedMonth = value;
					this.SendPropertyChanged("SerTimeLimitedMonth");
					this.OnSerTimeLimitedMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerStagedPayment", DbType="Int")]
		public System.Nullable<int> SerStagedPayment
		{
			get
			{
				return this._SerStagedPayment;
			}
			set
			{
				if ((this._SerStagedPayment != value))
				{
					this.OnSerStagedPaymentChanging(value);
					this.SendPropertyChanging();
					this._SerStagedPayment = value;
					this.SendPropertyChanged("SerStagedPayment");
					this.OnSerStagedPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerReferralProcess", DbType="VarChar(20)")]
		public string SerReferralProcess
		{
			get
			{
				return this._SerReferralProcess;
			}
			set
			{
				if ((this._SerReferralProcess != value))
				{
					this.OnSerReferralProcessChanging(value);
					this.SendPropertyChanging();
					this._SerReferralProcess = value;
					this.SendPropertyChanged("SerReferralProcess");
					this.OnSerReferralProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerDetail2RefList", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SerDetail2RefList
		{
			get
			{
				return this._SerDetail2RefList;
			}
			set
			{
				if ((this._SerDetail2RefList != value))
				{
					this.OnSerDetail2RefListChanging(value);
					this.SendPropertyChanging();
					this._SerDetail2RefList = value;
					this.SendPropertyChanged("SerDetail2RefList");
					this.OnSerDetail2RefListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgrammeID", DbType="Int")]
		public System.Nullable<int> ProgrammeID
		{
			get
			{
				return this._ProgrammeID;
			}
			set
			{
				if ((this._ProgrammeID != value))
				{
					if (this._Programme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgrammeIDChanging(value);
					this.SendPropertyChanging();
					this._ProgrammeID = value;
					this.SendPropertyChanged("ProgrammeID");
					this.OnProgrammeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerIsActive", DbType="Int NOT NULL")]
		public int SerIsActive
		{
			get
			{
				return this._SerIsActive;
			}
			set
			{
				if ((this._SerIsActive != value))
				{
					this.OnSerIsActiveChanging(value);
					this.SendPropertyChanging();
					this._SerIsActive = value;
					this.SendPropertyChanged("SerIsActive");
					this.OnSerIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherService", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string OtherService
		{
			get
			{
				return this._OtherService;
			}
			set
			{
				if ((this._OtherService != value))
				{
					this.OnOtherServiceChanging(value);
					this.SendPropertyChanging();
					this._OtherService = value;
					this.SendPropertyChanged("OtherService");
					this.OnOtherServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerDetail3RefList", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SerDetail3RefList
		{
			get
			{
				return this._SerDetail3RefList;
			}
			set
			{
				if ((this._SerDetail3RefList != value))
				{
					this.OnSerDetail3RefListChanging(value);
					this.SendPropertyChanging();
					this._SerDetail3RefList = value;
					this.SendPropertyChanged("SerDetail3RefList");
					this.OnSerDetail3RefListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_FundingDetail", Storage="_FundingDetail", ThisKey="SerID", OtherKey="SerID", IsUnique=true, IsForeignKey=false)]
		public FundingDetail FundingDetail
		{
			get
			{
				return this._FundingDetail.Entity;
			}
			set
			{
				FundingDetail previousValue = this._FundingDetail.Entity;
				if (((previousValue != value) 
							|| (this._FundingDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FundingDetail.Entity = null;
						previousValue.Service = null;
					}
					this._FundingDetail.Entity = value;
					if ((value != null))
					{
						value.Service = this;
					}
					this.SendPropertyChanged("FundingDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_OrganisationLinkService", Storage="_OrganisationLinkServices", ThisKey="SerID", OtherKey="SerID")]
		public EntitySet<OrganisationLinkService> OrganisationLinkServices
		{
			get
			{
				return this._OrganisationLinkServices;
			}
			set
			{
				this._OrganisationLinkServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_PremiseLinkService", Storage="_PremiseLinkServices", ThisKey="SerID", OtherKey="ServiceID")]
		public EntitySet<PremiseLinkService> PremiseLinkServices
		{
			get
			{
				return this._PremiseLinkServices;
			}
			set
			{
				this._PremiseLinkServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Service", Storage="_Contact", ThisKey="LeadContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._LeadContactID = value.ContactID;
					}
					else
					{
						this._LeadContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Programme_Service", Storage="_Programme", ThisKey="ProgrammeID", OtherKey="ProgrammeID", IsForeignKey=true)]
		public Programme Programme
		{
			get
			{
				return this._Programme.Entity;
			}
			set
			{
				Programme previousValue = this._Programme.Entity;
				if (((previousValue != value) 
							|| (this._Programme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Programme.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Programme.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._ProgrammeID = value.ProgrammeID;
					}
					else
					{
						this._ProgrammeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Programme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrganisationLinkServices(OrganisationLinkService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_OrganisationLinkServices(OrganisationLinkService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_PremiseLinkServices(PremiseLinkService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_PremiseLinkServices(PremiseLinkService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.County")]
	public partial class County : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountyID;
		
		private System.Nullable<int> _CountryID;
		
		private string _CountyName;
		
		private string _PostCode;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<GovOfficeRegion> _GovOfficeRegions;
		
		private EntitySet<Town> _Towns;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountyIDChanging(int value);
    partial void OnCountyIDChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnCountyNameChanging(string value);
    partial void OnCountyNameChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    #endregion
		
		public County()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._GovOfficeRegions = new EntitySet<GovOfficeRegion>(new Action<GovOfficeRegion>(this.attach_GovOfficeRegions), new Action<GovOfficeRegion>(this.detach_GovOfficeRegions));
			this._Towns = new EntitySet<Town>(new Action<Town>(this.attach_Towns), new Action<Town>(this.detach_Towns));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountyID
		{
			get
			{
				return this._CountyID;
			}
			set
			{
				if ((this._CountyID != value))
				{
					this.OnCountyIDChanging(value);
					this.SendPropertyChanging();
					this._CountyID = value;
					this.SendPropertyChanged("CountyID");
					this.OnCountyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CountyName
		{
			get
			{
				return this._CountyName;
			}
			set
			{
				if ((this._CountyName != value))
				{
					this.OnCountyNameChanging(value);
					this.SendPropertyChanging();
					this._CountyName = value;
					this.SendPropertyChanged("CountyName");
					this.OnCountyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Address", Storage="_Addresses", ThisKey="CountyID", OtherKey="CountyID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_GovOfficeRegion", Storage="_GovOfficeRegions", ThisKey="CountyID", OtherKey="CountyID")]
		public EntitySet<GovOfficeRegion> GovOfficeRegions
		{
			get
			{
				return this._GovOfficeRegions;
			}
			set
			{
				this._GovOfficeRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Town", Storage="_Towns", ThisKey="CountyID", OtherKey="CountyID")]
		public EntitySet<Town> Towns
		{
			get
			{
				return this._Towns;
			}
			set
			{
				this._Towns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_County", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Counties.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Counties.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.County = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.County = null;
		}
		
		private void attach_GovOfficeRegions(GovOfficeRegion entity)
		{
			this.SendPropertyChanging();
			entity.County = this;
		}
		
		private void detach_GovOfficeRegions(GovOfficeRegion entity)
		{
			this.SendPropertyChanging();
			entity.County = null;
		}
		
		private void attach_Towns(Town entity)
		{
			this.SendPropertyChanging();
			entity.County = this;
		}
		
		private void detach_Towns(Town entity)
		{
			this.SendPropertyChanging();
			entity.County = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Town")]
	public partial class Town : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TownID;
		
		private System.Nullable<int> _CountyID;
		
		private System.Nullable<int> _CountryID;
		
		private string _TownName;
		
		private string _PostCode;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<County> _County;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTownIDChanging(int value);
    partial void OnTownIDChanged();
    partial void OnCountyIDChanging(System.Nullable<int> value);
    partial void OnCountyIDChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnTownNameChanging(string value);
    partial void OnTownNameChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    #endregion
		
		public Town()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Country = default(EntityRef<Country>);
			this._County = default(EntityRef<County>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TownID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TownID
		{
			get
			{
				return this._TownID;
			}
			set
			{
				if ((this._TownID != value))
				{
					this.OnTownIDChanging(value);
					this.SendPropertyChanging();
					this._TownID = value;
					this.SendPropertyChanged("TownID");
					this.OnTownIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyID", DbType="Int")]
		public System.Nullable<int> CountyID
		{
			get
			{
				return this._CountyID;
			}
			set
			{
				if ((this._CountyID != value))
				{
					if (this._County.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIDChanging(value);
					this.SendPropertyChanging();
					this._CountyID = value;
					this.SendPropertyChanged("CountyID");
					this.OnCountyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TownName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TownName
		{
			get
			{
				return this._TownName;
			}
			set
			{
				if ((this._TownName != value))
				{
					this.OnTownNameChanging(value);
					this.SendPropertyChanging();
					this._TownName = value;
					this.SendPropertyChanged("TownName");
					this.OnTownNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCode", DbType="VarChar(10)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_Address", Storage="_Addresses", ThisKey="TownID", OtherKey="TownID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Town", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Towns.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Towns.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Town", Storage="_County", ThisKey="CountyID", OtherKey="CountyID", IsForeignKey=true)]
		public County County
		{
			get
			{
				return this._County.Entity;
			}
			set
			{
				County previousValue = this._County.Entity;
				if (((previousValue != value) 
							|| (this._County.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._County.Entity = null;
						previousValue.Towns.Remove(this);
					}
					this._County.Entity = value;
					if ((value != null))
					{
						value.Towns.Add(this);
						this._CountyID = value.CountyID;
					}
					else
					{
						this._CountyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("County");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Town = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Town = null;
		}
	}
}
#pragma warning restore 1591
